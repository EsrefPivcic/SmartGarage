/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 17.11.2024 23:17:21

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238544;
#else
constexpr int kTensorArenaSize = 237520;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0034607918933033943, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 31105, -43498, -39485, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00016818713629618287, 0.00012946038623340428, 0.00014534502406604588, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 58,37,127,-65,-81,42,9,50,-47,-13,2,-15,-22,-43,16,-26,-11,94,53,78,-22,-48,38,-92,-108,77,-108,38,7,2,-72,38, 
  /* [1][0][][] */ 57,-32,-64,22,2,127,-10,-7,122,-71,5,-66,-58,108,29,-46,92,-49,-1,-87,-104,20,104,78,21,26,15,-14,-62,-47,5,-22, 
  /* [2][0][][] */ -23,73,-69,69,81,-39,-23,101,85,43,113,4,-84,-70,84,108,-70,-41,6,-94,61,105,-43,-72,84,-63,-12,-127,36,-57,86,-15, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0044696200639009476, 0.0034404459875077009, 0.003862584475427866, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -13, 580, -101, 164, 202, 325, -383, 448, 253, 960, 436, -465, -491, -182, 329, 484, -211, -291, -418, -506, -389, 365, -99, -403, 236, 481, -664, 841, 345, -673, 486, -216, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.1554874517023563e-05, 5.3840838518226519e-05, 5.4402906243922189e-05, 5.0718572310870513e-05, 5.7577217376092449e-05, 5.3891650168225169e-05, 5.408377546700649e-05, 5.5329299357254058e-05, 5.5639538913965225e-05, 5.9105033869855106e-05, 5.4398075008066371e-05, 5.2228246204322204e-05, 5.2097759180469438e-05, 5.5176387832034379e-05, 6.6593238443601876e-05, 5.6590590247651562e-05, 5.6130171287804842e-05, 5.1792707381537184e-05, 5.0386377552058548e-05, 5.2291699830675498e-05, 4.9885253247339278e-05, 5.1725110097322613e-05, 5.9922091168118641e-05, 5.7790628488874063e-05, 5.7154851674567908e-05, 5.942951247561723e-05, 7.7088712714612484e-05, 5.8342047850601375e-05, 5.2857965783914551e-05, 5.3214014769764617e-05, 6.6949593019671738e-05, 5.4334035667125136e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -41,-59,105,5,93,-18,-111,-109,50,-111,-123,-2,59,5,-45,50,-59,-34,-74,-64,-86,-111,3,109,-127,1,82,-59,110,-4,-22,-92,89,-69,-99,69,-119,-86,-96,11,78,-96,-104,104,53,-120,112,-20, 
  /* [1][0][][] */ -44,50,-56,-2,-60,63,26,-14,59,-127,-90,112,77,-43,20,59,90,-39,47,100,-69,5,53,9,-2,3,-41,111,-8,-25,105,-88,64,98,-7,46,65,78,1,-87,-53,-18,-9,-111,-19,20,-11,-38, 
  /* [2][0][][] */ 54,20,-64,80,-29,-58,81,87,-110,70,-47,113,111,-26,87,-127,-76,-26,49,47,-102,-19,104,10,4,81,98,13,-78,91,73,93,-77,-37,-93,-112,-89,88,97,-47,-118,-97,10,-7,-82,108,-39,-85, 
  /* [3][0][][] */ 91,28,51,-10,-63,35,-120,46,77,41,93,15,107,113,67,29,127,109,-55,16,121,-84,-56,-108,-52,-112,-71,118,53,-127,108,1,-44,-18,-13,-2,-87,-9,66,77,-13,-57,-104,-7,98,35,-24,-70, 
  /* [4][0][][] */ 62,125,14,62,-14,-46,15,-11,20,62,16,65,37,-53,-30,-42,-18,-4,-52,5,67,-73,94,26,-51,11,71,-45,-54,-7,-56,-78,78,127,23,-83,-29,14,-87,33,-28,-41,-82,-89,51,72,63,73, 
  /* [5][0][][] */ 55,-73,73,98,58,-101,38,71,127,-97,-13,-55,-11,115,41,53,75,71,-97,114,45,63,27,-11,-86,-45,-4,-90,63,41,30,-87,-24,19,-61,7,-105,-53,45,42,-78,-28,45,109,-71,39,42,-46, 
  /* [6][0][][] */ 14,-51,107,69,-92,-66,-8,60,-23,-91,1,-94,87,48,109,-126,37,-3,-3,96,-82,-125,103,53,-64,-88,-15,-64,-32,-115,41,-83,-98,-127,-50,-110,-15,34,-114,72,79,50,18,-23,-117,100,-89,-51, 
  /* [7][0][][] */ 127,88,-24,-29,-72,99,-19,-23,66,-8,-80,24,64,-89,44,89,39,22,7,107,34,45,9,85,-122,99,50,59,-86,62,-9,21,37,41,72,113,-92,100,7,-61,105,-83,93,66,64,-26,124,-94, 
  /* [8][0][][] */ 14,57,-38,-73,73,24,-66,-10,26,55,58,103,1,-30,-84,-52,-50,98,-69,29,39,-15,90,123,-117,105,55,76,-53,18,-77,121,103,-14,53,4,123,13,-5,89,88,127,-104,-110,-2,-16,-8,119, 
  /* [9][0][][] */ 20,30,127,69,92,-82,-16,-107,22,57,9,71,-7,-53,-72,3,-5,23,-69,-44,24,115,-77,-76,102,12,2,44,12,-45,-59,108,68,30,45,2,-48,34,-12,-49,66,-70,73,-67,94,28,-58,70, 
  /* [10][0][][] */ -51,105,104,-54,-6,89,105,4,-6,17,39,-55,108,73,-44,30,-44,87,-92,-65,-36,41,72,-66,-15,58,-107,-112,-51,36,-80,-95,99,118,127,87,-28,21,-16,20,-22,125,-109,-38,-82,-87,20,-41, 
  /* [11][0][][] */ 113,7,-25,97,108,43,44,19,101,83,-87,105,-9,-101,16,-81,-10,-114,60,30,21,66,14,-127,-120,-112,-27,63,70,-17,15,-33,-99,-86,46,39,-77,68,-39,-77,-41,95,-90,-10,-37,-70,-102,-97, 
  /* [12][0][][] */ 7,60,-66,-12,78,0,-48,23,-91,50,-21,1,-56,0,40,-95,-95,-47,-55,-97,15,-23,6,90,-77,-67,95,-111,83,3,-51,108,-100,-85,-61,7,-16,-87,-28,29,107,29,-127,-52,-26,-102,-49,111, 
  /* [13][0][][] */ 86,-64,77,109,110,127,91,79,95,-81,-3,-21,65,88,67,-31,-100,-67,-96,45,80,-23,115,-28,-46,56,12,10,-71,-76,89,50,49,118,-16,12,-86,-48,8,89,-66,103,-57,21,-62,43,-3,-46, 
  /* [14][0][][] */ -39,-63,82,68,70,-34,-10,-99,-58,-25,69,75,-18,-63,-73,-56,-37,-44,16,23,-42,36,10,57,-127,-54,-20,29,-91,-125,-55,29,95,-4,-21,15,87,107,42,-85,5,-80,35,76,66,-107,74,-56, 
  /* [15][0][][] */ 33,-1,-9,80,71,-101,44,-112,35,-19,-48,22,117,-8,-93,-114,74,17,-75,6,27,31,87,88,40,54,51,97,3,25,73,-120,18,8,-53,14,-48,127,125,-83,30,88,-35,-35,43,-90,-12,-56, 
  /* [16][0][][] */ -86,-9,78,-43,59,127,-39,57,71,69,-119,75,-33,-28,-46,-41,121,80,48,82,123,81,-40,70,-13,71,-57,52,-80,29,47,28,-91,91,61,35,-39,35,-63,-45,18,-17,68,98,43,116,95,-29, 
  /* [17][0][][] */ 27,-127,27,82,-47,-105,-65,-107,45,-95,79,47,102,63,-124,52,47,52,100,120,-97,-19,7,-57,45,88,-91,33,123,-40,-42,77,-43,-27,32,-2,-55,98,-105,-28,-104,-48,-21,-15,-2,23,84,-127, 
  /* [18][0][][] */ -107,102,109,-84,-18,-124,-116,-9,-14,68,-120,-63,-40,25,58,-68,17,-37,58,-34,98,-59,12,-93,25,-110,-28,112,26,29,-11,37,39,-41,-127,-116,-44,31,-41,55,-50,-9,-63,-19,-123,7,13,-15, 
  /* [19][0][][] */ 15,24,70,32,52,-92,93,86,87,-73,24,-21,-106,26,-65,54,74,-116,109,52,-29,74,-65,6,76,-91,20,-78,-100,-125,-74,40,72,-92,25,-8,0,-78,-63,-112,38,-127,-93,2,-90,22,74,-106, 
  /* [20][0][][] */ 7,85,88,94,-101,86,12,50,11,0,-72,1,2,82,42,-83,-57,-48,-69,-46,13,-53,-88,-87,77,-79,-119,68,17,2,-52,111,101,39,-23,63,50,-14,-15,-127,-86,-46,-104,-105,-8,-80,-77,117, 
  /* [21][0][][] */ 107,106,86,-94,112,-100,78,13,9,-60,-59,54,11,44,-59,-73,-98,-28,32,-12,106,-42,87,-76,24,-79,-24,82,21,-27,2,-29,19,40,-91,-107,127,115,-105,-16,4,38,33,-16,-89,-92,-62,114, 
  /* [22][0][][] */ 26,-44,-71,-114,76,-70,78,50,-86,79,-73,-96,101,-109,-127,-91,33,75,-105,-89,67,-68,27,-19,84,0,-105,94,-71,-85,-59,-105,44,42,15,7,3,-18,-57,-119,1,-30,-1,88,46,-126,79,-22, 
  /* [23][0][][] */ 40,-90,-21,62,108,-98,13,-81,78,-57,67,68,-16,-92,9,-24,98,-36,-127,110,99,-81,89,-15,5,1,79,6,79,58,69,-24,-32,52,17,11,81,-28,-120,25,-105,28,-7,-106,-83,-77,104,13, 
  /* [24][0][][] */ -63,-21,-86,-55,-85,-127,-73,-98,36,117,99,53,117,57,-57,-97,-59,44,32,-63,77,-68,-41,-52,1,-30,85,63,94,21,13,-81,13,27,51,40,-39,-65,78,-12,-59,-81,98,-11,37,-43,63,86, 
  /* [25][0][][] */ -77,-57,-82,3,97,-25,-85,68,55,-85,-56,28,65,12,-79,-14,-60,69,39,-80,80,85,-5,-36,32,-40,-85,19,84,-63,38,127,97,-90,55,60,93,-72,-34,-3,-84,102,-85,21,76,52,41,27, 
  /* [26][0][][] */ 26,-82,-31,-16,-33,-19,-19,9,-41,-54,68,64,-77,-26,-1,10,112,14,-71,-28,27,44,59,32,95,88,4,23,40,49,-59,11,-26,-37,-74,-84,-52,50,-45,127,-73,125,22,19,-60,68,-18,64, 
  /* [27][0][][] */ 23,24,-31,-75,-113,-22,-10,-8,78,113,42,-93,32,76,127,-13,69,-2,71,-51,-86,28,-14,-1,-99,68,-103,38,91,40,-28,19,54,63,-72,-67,-68,-46,-110,73,-74,-1,61,45,99,45,52,96, 
  /* [28][0][][] */ 107,-2,108,51,-113,-65,-78,-92,-40,-105,72,68,-78,-89,25,127,85,107,-63,75,-41,27,-104,-71,-108,93,-101,-39,-74,-85,1,-28,-119,20,74,94,23,-91,-34,32,121,48,-74,68,-98,-18,33,49, 
  /* [29][0][][] */ 39,38,42,-65,-99,9,-127,1,98,-20,-105,-109,94,-112,-59,-56,-102,91,14,-74,-82,-47,42,-2,-22,-4,-57,-41,-105,0,93,-12,39,-12,-94,-69,-24,90,-24,89,35,104,-57,74,-14,102,-66,-39, 
  /* [30][0][][] */ 36,-30,-38,40,-80,6,-52,-27,82,-24,16,-18,-69,3,44,9,5,42,86,-97,18,-67,-74,12,-127,23,-35,101,-19,-127,-60,-14,-47,-36,-82,-29,27,3,18,21,88,-50,-6,74,102,-82,113,69, 
  /* [31][0][][] */ 91,-100,34,95,48,65,-64,-100,-34,-26,-82,-87,111,-127,-47,105,-12,-87,43,47,63,34,-34,104,52,-111,42,37,-75,-68,46,109,21,14,-90,-9,96,-34,-70,-117,59,-73,-33,30,11,-52,-35,24, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021910821087658405, 0.0022882355842739344, 0.0023121235426515341, 0.0021555393468588591, 0.0024470316711813211, 0.002290395088493824, 0.0022985604591667652, 0.0023514952044934034, 0.0023646804038435221, 0.0025119639467447996, 0.0023119181860238314, 0.0022197004873305559, 0.0022141546942293644, 0.0023449964355677366, 0.0028302127029746771, 0.0024051000364124775, 0.0023855322506278753, 0.002201189985498786, 0.0021414209622889757, 0.002222397131845355, 0.0021201232448220253, 0.0021983170881867409, 0.002546688774600625, 0.0024561015889048576, 0.0024290811270475388, 0.0025257542729377747, 0.0032762701157480478, 0.0024795369245111942, 0.0022464634384959936, 0.0022615955676883459, 0.0028453576378524303, 0.0023091963957995176, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 1173, -903, 3229, 2361, 1838, 10, 1629, 3600, -1865, -1324, -948, 6211, 2899, 3407, 5029, -3255, -2631, 6743, 2594, 2448, 2958, 14790, 9033, 528, -1155, 1107, -411, -699, 1782, 1315, 2694, 6401, -795, 364, 7313, 2807, 5292, 2126, 1112, -1146, 2142, -1154, 7160, -326, 268, 2138, -1142, 3065, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00027618490275926888, 0.00036194530548527837, 0.0002258018939755857, 0.00021859917615074664, 0.00028031380497850478, 0.00048608687939122319, 0.00019208239973522723, 0.00020798498007934541, 0.00024485823814757168, 0.00028438854496926069, 0.00034558979677967727, 0.00012608537508640438, 0.00022645201534032822, 0.00017275044228881598, 0.00017070835747290403, 0.00017866595590021461, 0.00023795511515345424, 0.00014616784756071866, 0.00024336922797374427, 0.00031660115928389132, 0.00026654760586097836, 7.4023315391968936e-05, 0.00010869534889934584, 0.00039586916682310402, 0.00031725011649541557, 0.00025878573069348931, 0.00026554646319709718, 0.00027861932176165283, 0.00022658730449620634, 0.00032235198887065053, 0.00023164339654613286, 0.00013799834414385259, 0.00023405601677950472, 0.00030611612601205707, 0.00012563416385091841, 0.00021507997007574886, 0.00016363171744160354, 0.00028885810752399266, 0.0003525854554027319, 0.0003107201773673296, 0.00027783765108324587, 0.00040146359242498875, 0.00013128906721249223, 0.0003761083644349128, 0.00043710294994525611, 0.0002661883772816509, 0.00038325696368701756, 0.00023777330352459103, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -10,6,127,-16,1,61,3,-84, 
  /* [1][0][][] */ 78,-65,64,-71,-16,-56,127,24, 
  /* [2][0][][] */ 61,63,64,-63,-69,15,127,-22, 
  /* [3][0][][] */ 7,33,9,-17,22,-75,127,7, 
  /* [4][0][][] */ 127,-53,-72,-34,-102,-83,-18,77, 
  /* [5][0][][] */ 27,66,127,-6,26,-50,31,-44, 
  /* [6][0][][] */ 112,113,-13,127,-76,30,27,102, 
  /* [7][0][][] */ -22,-19,-2,25,40,-120,-127,-26, 
  /* [8][0][][] */ 118,68,-55,85,-73,17,-127,-52, 
  /* [9][0][][] */ 127,-20,-31,43,5,-32,20,-88, 
  /* [10][0][][] */ 67,18,-9,11,-28,127,38,13, 
  /* [11][0][][] */ 107,-37,-15,-127,104,-54,-43,82, 
  /* [12][0][][] */ -59,92,70,-44,18,67,-75,127, 
  /* [13][0][][] */ 127,-12,-106,10,27,-104,35,-94, 
  /* [14][0][][] */ 115,39,2,-16,-127,26,-89,-16, 
  /* [15][0][][] */ 6,31,-88,-7,-127,-63,112,88, 
  /* [16][0][][] */ -4,-50,118,4,127,-44,-62,-35, 
  /* [17][0][][] */ 18,-23,74,-12,127,-58,-58,1, 
  /* [18][0][][] */ 116,-33,127,44,-28,25,-49,1, 
  /* [19][0][][] */ 60,27,46,-60,-34,-127,24,-32, 
  /* [20][0][][] */ 44,-48,48,127,13,-80,-69,81, 
  /* [21][0][][] */ 93,-5,-87,-127,57,-76,0,104, 
  /* [22][0][][] */ -47,-127,-78,-61,48,-57,120,-61, 
  /* [23][0][][] */ -8,11,23,-49,-101,-127,8,-23, 
  /* [24][0][][] */ 127,-7,71,44,-7,-12,-103,74, 
  /* [25][0][][] */ 101,73,-36,-67,-36,-36,-16,127, 
  /* [26][0][][] */ -81,-37,28,-127,112,7,-35,-68, 
  /* [27][0][][] */ 112,127,-12,-58,18,74,39,11, 
  /* [28][0][][] */ 29,127,6,4,11,-45,-16,116, 
  /* [29][0][][] */ 122,10,100,94,43,-27,-127,44, 
  /* [30][0][][] */ 127,-96,-78,109,40,-4,-84,83, 
  /* [31][0][][] */ 97,-78,27,51,-81,-106,-127,53, 
  /* [32][0][][] */ -105,-88,22,-127,87,-9,-23,-85, 
  /* [33][0][][] */ 23,-16,22,12,34,-78,127,50, 
  /* [34][0][][] */ -74,60,90,-88,127,-97,-53,117, 
  /* [35][0][][] */ -79,6,11,124,0,127,49,-23, 
  /* [36][0][][] */ 83,25,-36,-127,42,-6,30,47, 
  /* [37][0][][] */ 36,32,-22,5,-59,127,70,49, 
  /* [38][0][][] */ -12,-76,25,106,26,62,5,127, 
  /* [39][0][][] */ 16,-2,-127,43,-9,-44,-28,61, 
  /* [40][0][][] */ 54,7,-85,2,-39,56,-41,127, 
  /* [41][0][][] */ 36,-8,5,-42,-81,-127,-6,0, 
  /* [42][0][][] */ -84,65,-97,116,-17,88,-29,-127, 
  /* [43][0][][] */ -7,7,-36,-127,-19,-1,-18,-82, 
  /* [44][0][][] */ 57,15,14,70,32,127,-39,38, 
  /* [45][0][][] */ 4,81,-26,19,127,-39,-78,-10, 
  /* [46][0][][] */ 60,-75,-3,127,79,21,-41,80, 
  /* [47][0][][] */ -25,-91,40,-12,127,8,65,30, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0029744410421699286, 0.0038980585522949696, 0.0024318287614732981, 0.0023542572744190693, 0.0030189079698175192, 0.0052350317128002644, 0.0020686783827841282, 0.0022399451117962599, 0.0026370608247816563, 0.0030627921223640442, 0.0037219137884676456, 0.0013579073129221797, 0.0024388304445892572, 0.0018604781944304705, 0.0018384854774922132, 0.0019241867121309042, 0.0025627159047871828, 0.0015741904499009252, 0.0026210243813693523, 0.0034097137395292521, 0.0028706497978419065, 0.00079721218207851052, 0.0011706211371347308, 0.0042634098790585995, 0.0034167026169598103, 0.0027870563790202141, 0.0028598676435649395, 0.0030006589367985725, 0.0024402874987572432, 0.0034716485533863306, 0.0024947402998805046, 0.0014862068928778172, 0.0025207235012203455, 0.0032967925071716309, 0.0013530479045584798, 0.0023163564037531614, 0.0017622718587517738, 0.0031109279952943325, 0.0037972552236169577, 0.0033463770523667336, 0.0029922407120466232, 0.0043236603960394859, 0.0014139497652649879, 0.0040505910292267799, 0.0047074873000383377, 0.0028667808510363102, 0.0041275797411799431, 0.0025607577990740538, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -10379, -3458, -1341, -10796, 1919, -1629, 11966, 10459, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00015808943135198206, 0.00016487314132973552, 0.00010465364175615832, 0.0001438256585970521, 9.2249465524218976e-05, 0.00015811288903933018, 0.00011007443390553817, 0.00016850566316861659, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-32,20,-23,26,58,12,44,118,-91,66,20,-49,58,14,-50,6,-21,-32,-18,-3,-54,8,-20,-59,-30,-47,-39,-28,73,-25,32,35,-43,19,-26,62,-62,-50,1,19,-32,-72,-1,61,-29,56,-32, 
  /* [1][0][][] */ 44,4,-5,58,57,55,20,28,67,-86,-9,9,39,21,-38,-15,-34,-42,-72,-1,11,-51,52,80,-3,-72,-4,37,-31,48,-57,127,-22,45,-26,-21,-62,-19,-7,-24,-49,-8,-34,45,25,-4,7,-90, 
  /* [2][0][][] */ -28,-18,-76,19,-86,-47,-18,50,-114,-68,-91,-21,-33,60,-106,-15,64,-74,21,-21,127,92,-10,-2,39,85,17,-88,-60,-12,70,-10,-18,51,73,-73,53,-17,83,100,-27,119,32,-7,-72,67,-48,85, 
  /* [3][0][][] */ 6,-26,-17,38,-32,8,-12,53,79,107,-127,-39,26,-19,-33,84,-66,-25,-2,49,-29,-6,72,27,7,18,-49,60,-30,43,-47,-15,6,24,40,19,66,-3,39,-1,-55,78,72,28,23,-19,-22,-42, 
  /* [4][0][][] */ -25,-65,12,-46,7,86,-56,-65,-1,-47,69,42,-51,-20,-10,19,66,19,-26,47,-78,-20,100,-20,-97,-15,-7,17,15,-32,-7,58,-45,52,-18,49,-30,37,2,23,-34,37,-39,30,127,57,-14,14, 
  /* [5][0][][] */ -76,-56,68,-127,-22,21,-46,-69,-6,65,-68,73,-78,28,58,14,75,55,70,13,40,-6,-13,-68,37,-82,5,-48,-21,-57,47,-85,-12,-37,45,-5,-20,23,32,61,97,30,11,-28,-8,-2,-31,22, 
  /* [6][0][][] */ -66,-58,43,25,-53,-64,7,-74,-98,8,-127,43,19,-40,57,15,-33,16,11,119,-15,-5,77,39,-77,-23,49,14,8,-48,-28,-72,-35,67,56,-87,-42,66,52,-34,-59,73,72,-66,0,-34,-40,4, 
  /* [7][0][][] */ 19,-4,15,-7,11,25,-44,-41,-127,-39,105,35,9,-30,33,-5,10,52,-6,-23,-52,20,-15,-40,33,7,-44,17,-12,-34,-24,-57,-97,-48,-31,8,56,-32,-17,-4,53,-4,45,-24,24,-39,34,25, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0067188004031777382, 0.00700710853561759, 0.00444777961820364, 0.0061125904321670532, 0.0039206021465361118, 0.0067197973839938641, 0.0046781632117927074, 0.0071614906191825867, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -5799, 744, 9711, 4471, -1351, -5465, 927, 9294, 6928, -2863, -4260, -4861, -2879, 12072, 8366, -831, 6190, -5311, 1135, -983, 17669, -3073, -1857, -698, 2304, -2663, 250, -2681, 7545, -24186, -4726, 1051, -1920, -1272, -2459, -1785, 4502, -6681, 1456, -14643, -1302, 4028, -3121, -2351, 2430, -3168, 7736, -2663, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00028125187964178622, 0.00013572523312177509, 0.00014264156925491989, 9.2802925792057067e-05, 0.00023846747353672981, 0.00015747178986202925, 0.00027779510128311813, 0.00017506924632471055, 0.00016336157568730414, 0.00043272296898066998, 0.00032074560294859111, 6.4338732045143843e-05, 0.00029307961813174188, 9.7261850896757096e-05, 0.00013560320076067001, 0.00021379943063948303, 0.00018115717102773488, 0.00015073179383762181, 0.0001671515783527866, 0.00025626682327128947, 0.00010378177103120834, 0.0001844379585236311, 0.00022462138440459967, 0.00023951187904458493, 0.00019056095334235579, 0.00042656980804167688, 0.00025594577891752124, 0.00040277864900417626, 0.00010430012480355799, 9.7156560514122248e-05, 0.00016522973601240665, 0.00024742272216826677, 8.1451849837321788e-05, 0.00045298141776584089, 9.8488111689221114e-05, 0.00014802539953961968, 0.00025873316917568445, 6.1246137192938477e-05, 6.3519015384372324e-05, 7.1197413490153849e-05, 0.00025696688680909574, 0.00019075516320299357, 0.00020862917881458998, 0.00020621294970624149, 0.00016095211321953684, 0.00010564150579739362, 0.00014937737432774156, 0.00022787752095609903, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 90,77,-30,42,-1,-4,-71,11,40,-70,48,8,20,-90,-28,32,92,27,-56,7,86,25,-18,-13,82,36,20,-2,-67,56,-23,-57,127,4,102,38,-30,26,123,52,-78,69,-100,-51,32,-95,-49,8, 114,127,-62,76,29,52,-95,-127,51,36,127,22,-6,1,-11,-3,-80,127,-76,39,28,127,35,-26,29,25,13,127,-127,105,-31,-127,14,-32,17,82,-56,127,127,57,-127,-86,75,-5,6,13,-127,96, 72,55,-23,43,-5,-13,-60,27,28,-64,46,18,13,-63,-32,-22,79,-11,-20,-9,83,19,-28,45,64,63,15,1,-10,45,-24,-41,94,15,93,33,-16,50,95,15,-24,62,40,46,36,79,20,4, 
  /* [0][1][][] */ -10,-68,-88,98,23,64,72,-20,38,70,-45,127,127,7,-31,-68,-27,88,71,-23,-105,21,36,-103,29,44,20,13,-5,127,41,51,49,127,39,52,-67,13,-62,117,78,21,83,-92,14,-101,-23,127, 58,-111,7,-127,127,13,127,-74,-127,127,4,52,-101,127,127,-14,-127,74,16,127,14,-7,127,-11,-127,127,37,-73,-94,44,-127,92,105,-89,31,127,127,82,-11,127,118,-58,-33,11,127,-43,-15,18, -5,-53,-127,63,-18,127,68,-8,33,51,-45,77,-18,12,-38,-13,-60,97,127,-44,-127,19,-59,127,14,16,22,28,54,96,58,37,-15,3,-33,-112,-36,-5,-15,49,42,83,-34,127,-12,127,-35,94, 
  /* [0][2][][] */ -27,-20,-31,27,-7,17,-7,10,29,-45,7,11,47,-88,-39,39,91,10,13,-3,-93,20,-5,-11,20,-23,-11,-2,3,9,65,3,-5,7,127,4,5,72,65,79,17,78,127,-8,-46,-117,1,-29, -127,-21,-82,30,-124,7,-87,-13,16,77,-90,42,-14,-43,-9,127,-99,37,-89,-52,-105,19,1,-36,-18,20,-127,-25,-65,101,95,15,18,-29,9,40,-4,69,-62,90,-63,-127,-127,-17,-126,73,-99,71, -20,-43,-32,23,11,3,-11,9,21,-72,-7,-6,-14,-72,-25,6,98,-19,97,13,-67,0,8,34,17,-34,-12,-12,18,7,43,4,15,4,92,28,3,78,69,9,18,75,-66,53,-41,90,13,-49, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.012401286512613297, 0.0059845554642379284, 0.0062895184382796288, 0.004091974813491106, 0.010514786466956139, 0.0069434302859008312, 0.012248865328729153, 0.0077193574979901314, 0.0072031295858323574, 0.019080126658082008, 0.014142690226435661, 0.002836898434907198, 0.012922808527946472, 0.0042885830625891685, 0.0059791747480630875, 0.0094270939007401466, 0.0079877935349941254, 0.0066462419927120209, 0.0073702428489923477, 0.011299615725874901, 0.0045760669745504856, 0.0081324540078639984, 0.0099042681977152824, 0.01056083757430315, 0.0084024360403418541, 0.018808813765645027, 0.01128546055406332, 0.017759786918759346, 0.0045989230275154114, 0.0042839404195547104, 0.0072855022735893726, 0.010909651406109333, 0.0035914699546992779, 0.019973386079072952, 0.0043426528573036194, 0.0065269088372588158, 0.011408364400267601, 0.0027005362790077925, 0.0028007547371089458, 0.003139319596812129, 0.011330483481287956, 0.0084109995514154434, 0.0091991210356354713, 0.0090925823897123337, 0.0070968884974718094, 0.0046580685302615166, 0.0065865213982760906, 0.010047841817140579, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 13522, 4689, 1417, 762, 4153, 1731, 5389, 3719, 2397, -5929, 7994, 898, 7932, 1811, 2814, 1422, 6135, -683, 6526, 410, 3771, -820, 3174, 4389, 1597, -2790, 1380, 9376, 617, 5882, 1096, 8021, 1016, 3791, -549, -1106, 2200, 3245, 164, 1017, 6492, -858, 10008, 2435, 539, 4803, 3250, -1992, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 7.5074021879117936e-05, 0.00017537792155053467, 0.00019035997684113681, 0.00029252597596496344, 0.00017684169870335609, 0.00025162979727610946, 0.00015116971917450428, 0.00018642858776729554, 0.00019507957040332258, 0.00013461372873280197, 0.00011440086382208392, 0.00021928397472947836, 0.00010659120744094253, 0.00020095569198019803, 0.00022615795023739338, 0.00025869469391182065, 0.00012291078746784478, 0.00029222812736406922, 0.00014102438581176102, 0.00019855464051943272, 0.00018839466792996973, 0.00019282051653135568, 0.00019185271230526268, 0.00016682328714523464, 0.00025695905787870288, 0.00022877426818013191, 0.00030088107450865209, 0.00010111737356055528, 0.0002553826489020139, 0.00012145820073783398, 0.00024325025151483715, 0.0001165028297691606, 0.00018863337754737586, 0.00021327217109501362, 0.00016745430184528232, 0.00035382300848141313, 0.00026639681891538203, 0.00013127476267982274, 0.00032626485335640609, 0.00029592096689157188, 0.00013471311831381172, 0.00025284648290835321, 8.5943764133844525e-05, 0.00020137369574513286, 0.00033890441409312189, 0.00016602843243163079, 0.00018666606047190726, 0.00017396816110704094, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,40,-30,4,74,23,17,-65, 
  /* [1][0][][] */ 2,-57,-44,-6,-43,-127,-1,20, 
  /* [2][0][][] */ -86,65,8,-62,-55,43,-81,127, 
  /* [3][0][][] */ 58,31,54,-10,-39,-127,41,-15, 
  /* [4][0][][] */ 26,51,-121,40,-127,105,34,21, 
  /* [5][0][][] */ -27,36,27,-28,-75,-127,-49,-7, 
  /* [6][0][][] */ -68,122,127,-36,-75,-31,19,-36, 
  /* [7][0][][] */ -13,1,41,62,1,-127,-2,49, 
  /* [8][0][][] */ 127,22,-65,80,-73,-70,-106,-7, 
  /* [9][0][][] */ 113,-36,-65,-97,10,-26,-63,127, 
  /* [10][0][][] */ -86,3,-7,127,13,76,34,-114, 
  /* [11][0][][] */ 24,28,40,-7,8,105,127,83, 
  /* [12][0][][] */ -81,-107,-39,-117,127,-26,-2,76, 
  /* [13][0][][] */ -27,-9,-2,45,22,-127,37,71, 
  /* [14][0][][] */ 54,67,116,26,51,-127,-104,-23, 
  /* [15][0][][] */ -40,89,127,64,-20,19,48,-71, 
  /* [16][0][][] */ -91,-50,53,-77,127,21,-62,-23, 
  /* [17][0][][] */ 36,-44,-45,9,-5,127,-19,38, 
  /* [18][0][][] */ -13,127,50,-51,-52,56,72,-94, 
  /* [19][0][][] */ 9,117,70,127,-41,10,37,24, 
  /* [20][0][][] */ 0,9,74,-127,-81,-20,76,-8, 
  /* [21][0][][] */ -103,78,35,-127,111,64,118,6, 
  /* [22][0][][] */ 77,-34,-89,62,52,-55,-60,127, 
  /* [23][0][][] */ 30,-71,-117,-49,57,-15,-52,127, 
  /* [24][0][][] */ 35,-22,-92,22,-63,37,-127,111, 
  /* [25][0][][] */ -5,-24,48,14,127,-24,-64,-36, 
  /* [26][0][][] */ 5,119,127,-40,-45,-19,59,-66, 
  /* [27][0][][] */ -35,33,127,-78,29,30,82,-127, 
  /* [28][0][][] */ 59,-9,78,127,67,-30,40,95, 
  /* [29][0][][] */ 78,73,111,4,-47,43,-127,109, 
  /* [30][0][][] */ 44,-17,-102,60,-127,-39,-36,52, 
  /* [31][0][][] */ 6,110,127,-75,-79,32,120,-110, 
  /* [32][0][][] */ 67,-12,-3,26,117,127,26,-43, 
  /* [33][0][][] */ 22,-33,-127,-6,21,-12,-42,69, 
  /* [34][0][][] */ 35,-47,25,-127,3,68,-18,1, 
  /* [35][0][][] */ -22,19,102,-11,17,-127,-9,-27, 
  /* [36][0][][] */ -9,15,-40,-127,-8,0,7,-41, 
  /* [37][0][][] */ 67,-7,-19,-91,-96,127,-71,-86, 
  /* [38][0][][] */ 78,-54,-18,89,57,29,-33,127, 
  /* [39][0][][] */ 127,86,15,77,-10,86,-35,1, 
  /* [40][0][][] */ 38,-127,-115,-20,20,29,-60,113, 
  /* [41][0][][] */ -6,-65,-127,-116,-1,-55,-43,-7, 
  /* [42][0][][] */ 75,125,106,127,-93,-18,27,52, 
  /* [43][0][][] */ 114,-33,-91,-127,-61,-33,33,94, 
  /* [44][0][][] */ -8,57,80,-46,-61,-7,66,-127, 
  /* [45][0][][] */ 38,19,-127,55,-35,34,27,65, 
  /* [46][0][][] */ 54,-38,-106,-127,10,-59,-51,50, 
  /* [47][0][][] */ 100,-117,127,-63,92,-14,17,12, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0010854009306058288, 0.0025355690158903599, 0.0027521757874637842, 0.0042292657308280468, 0.0025567319244146347, 0.0036379990633577108, 0.0021855731029063463, 0.0026953367050737143, 0.0028204105328768492, 0.0019462107447907329, 0.001653978368267417, 0.0031703514978289604, 0.001541068428196013, 0.0029053660109639168, 0.0032697336282581091, 0.0037401416338980198, 0.0017770127160474658, 0.0042249592952430248, 0.0020388944540172815, 0.0028706521261483431, 0.0027237618342041969, 0.0027877497486770153, 0.0027737573254853487, 0.0024118884466588497, 0.003715048311278224, 0.0033075597602874041, 0.0043500615283846855, 0.001461929059587419, 0.003692256985232234, 0.0017560115084052086, 0.0035168498288840055, 0.001684368122369051, 0.0027272130828350782, 0.003083434421569109, 0.0024210114497691393, 0.0051154824905097485, 0.0038514968473464251, 0.0018979368032887578, 0.0047170538455247879, 0.0042783496901392937, 0.0019476476591080427, 0.0036555896513164043, 0.0012425528839230537, 0.0029114093631505966, 0.004899793304502964, 0.0024003966245800257, 0.0026987700257450342, 0.0025151870213449001, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -12386, -37708, 1130, 7178, -17477, 3040, -26543, -312, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00012783794954884797, 5.9454323491081595e-05, 7.1763723099138588e-05, 6.5918378822971135e-05, 7.2595335950609297e-05, 9.2645052063744515e-05, 6.4864230807870626e-05, 0.00011500670370878652, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 42,49,-77,44,14,19,-86,-27,6,-19,2,-38,-13,3,40,5,39,-21,46,-26,18,-38,33,-6,19,-18,-19,11,-16,0,-11,-4,40,23,26,20,127,55,26,-24,5,-23,-6,-17,82,27,27,-48, 
  /* [1][0][][] */ 55,20,18,4,25,96,-14,-12,33,65,-49,-73,116,-10,12,53,34,29,23,-100,125,-24,44,61,45,42,47,17,23,-59,64,85,68,113,16,127,75,38,22,21,84,26,46,38,13,47,122,-74, 
  /* [2][0][][] */ -26,1,75,127,-47,25,-4,55,40,75,10,-66,-28,114,17,37,-84,-104,64,3,-8,59,-75,-89,-25,-28,25,-16,-117,34,6,4,-27,-17,-73,-32,19,19,-92,-23,-15,-60,-22,32,55,-62,-15,22, 
  /* [3][0][][] */ -26,60,-78,-9,9,-76,5,76,110,-87,-46,16,-16,-28,15,62,36,16,-5,-26,-1,27,-77,55,-19,-38,47,-7,80,-42,39,-50,45,-15,-40,-63,-127,4,-76,21,-31,-59,52,-10,-62,16,-24,-34, 
  /* [4][0][][] */ 58,-41,35,-27,-77,72,12,65,-127,-54,50,57,86,-61,-72,-59,100,67,76,-51,22,-88,-20,55,-50,-3,-60,-123,-68,-79,84,41,99,-4,116,106,70,73,68,38,-7,52,-61,-45,89,89,106,-65, 
  /* [5][0][][] */ 47,88,12,99,23,31,-57,-113,-101,17,-13,-2,34,61,35,-77,75,115,-23,47,-23,-65,-24,-72,-124,-101,-43,67,-8,57,-49,39,10,-90,84,10,-46,125,-41,-127,-7,-49,-23,-58,-18,-7,-37,100, 
  /* [6][0][][] */ 118,51,-12,127,-101,32,20,66,23,-95,69,87,88,-43,-38,-57,62,17,-81,37,80,-23,-34,5,19,60,-35,-51,5,-35,61,69,30,-50,8,98,84,-93,7,3,-83,75,-109,54,44,112,113,-62, 
  /* [7][0][][] */ 21,11,127,34,-36,59,-86,7,-32,96,-10,-9,54,65,11,-4,-67,-16,-68,7,-11,33,-15,-54,-8,38,47,-19,-8,5,18,-16,-93,-13,68,40,80,-13,30,-7,-20,-44,-34,-51,3,-25,27,23, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0056417169980704784, 0.0026238253340125084, 0.0031670611351728439, 0.0029090954922139645, 0.0032037617638707161, 0.004088591318577528, 0.0028625740669667721, 0.005075450986623764, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 13270, -15488, -734, 1752, -1964, 9853, 2782, -4567, -7342, 3582, -2742, -1983, -9934, -10177, 5817, -785, -8880, 33707, -1715, -9488, 14086, -3805, -106, 1331, 2767, -3921, -4181, 1650, -1804, 2645, 732, 16297, 8868, -450, 5086, 24590, -2708, 13011, 1277, 239, -2484, -7089, -430, 3269, 1864, 18185, 13319, -2759, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 9.4105453172232956e-05, 8.7452703155577183e-05, 0.0012304176343604922, 0.00030486538889817894, 0.00019817454449366778, 0.00015495206753257662, 0.00011365005775587633, 0.00030189618701115251, 0.00011843987158499658, 0.00031794974347576499, 0.00021167306113056839, 0.00014445683336816728, 0.00010427285451442003, 0.00013061928621027619, 0.00011091502528870478, 0.00010725983156589791, 6.7523506004363298e-05, 4.8315952881239355e-05, 0.00032820177148096263, 7.8837845649104565e-05, 9.0923975221812725e-05, 0.00034298485843464732, 0.00022938335314393044, 0.00018339384405408055, 0.00027225149096921086, 0.00028097728500142694, 0.00019302977307233959, 0.00023871554003562778, 0.00030603836057707667, 0.00022117259504739195, 0.00011821951920865104, 0.00010680656123440713, 0.00015170218830462545, 0.00022011346300132573, 0.00015957654977682978, 0.00010699551785364747, 0.00082080933498218656, 0.00017599965212866664, 0.00012496339331846684, 0.00041264397441409528, 0.00011454583727754653, 0.00015878761769272387, 0.00020175964164081961, 0.0001422983332304284, 0.00022783959866501391, 7.9445046139881015e-05, 0.00014645671762991697, 0.00017318497702945024, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -24,21,36,3,127,-59,9,19,2,20,51,7,-1,37,-74,15,69,-72,-7,27,-23,23,-65,-25,-25,16,42,-53,-25,127,29,-61,-46,93,92,-125,11,-44,-127,-31,7,-24,-19,-70,0,-12,-106,9, -35,68,-11,25,1,-81,93,-9,72,6,80,127,56,127,-14,38,96,-127,11,43,-23,-9,84,-127,-2,58,-95,16,-29,-83,84,-127,-127,-80,23,-60,-57,-26,-104,21,-64,-25,16,-127,26,-52,47,49, -6,25,14,-9,63,-29,27,6,26,21,15,-16,-1,26,-69,22,64,-46,-7,30,-13,8,-78,-24,17,15,36,-119,-36,62,-45,-58,-18,-16,80,-62,15,-25,-111,3,17,-7,4,-55,-4,-103,-121,-25, 
  /* [0][1][][] */ -127,122,-10,-62,10,-45,28,3,23,15,83,15,100,62,-72,36,124,-127,15,85,-17,-41,-80,-39,-127,8,-23,10,-13,-16,88,-49,-38,127,-94,-118,38,-47,34,58,-123,43,-90,54,-5,-105,7,-58, -1,127,127,127,-35,113,-127,127,127,-127,-14,36,127,51,127,-70,-60,-107,127,29,-127,127,127,3,89,127,71,127,127,-89,127,-6,-27,-90,4,-127,127,127,100,64,-70,127,-27,76,127,81,-2,-127, -76,67,-28,-47,-61,-91,31,-11,-11,2,127,13,73,43,-59,121,127,-112,-8,110,48,-69,-79,-34,13,-3,-31,14,-5,2,84,-39,5,-42,-127,-114,25,-57,32,-127,-90,33,127,64,-21,-127,-27,114, 
  /* [0][2][][] */ -22,-32,11,-8,26,-49,42,14,22,21,48,29,36,-13,-45,84,93,-33,-61,22,-46,14,-37,41,-29,-5,-33,-31,20,48,8,13,14,41,-86,23,-33,-49,49,-31,90,0,-19,-1,-24,22,-26,-47, -76,91,11,15,-79,-127,88,-58,51,18,18,-31,-36,11,-56,127,83,11,-21,127,-94,24,86,126,-3,-123,127,1,29,-54,-44,-77,23,-49,-55,-115,-61,-71,31,42,127,60,-43,42,-24,-59,-127,-18, 43,-21,27,-1,-9,-54,35,22,18,18,31,11,56,-9,-46,56,60,-47,-69,10,-25,0,-40,33,-4,-10,-33,-63,19,-4,-6,26,21,-11,-46,56,-28,-38,58,-1,48,-6,42,2,-25,-41,-3,16, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0044281105510890484, 0.0041150669567286968, 0.057897020131349564, 0.014345371164381504, 0.0093250581994652748, 0.0072912340983748436, 0.0053477776236832142, 0.014205656014382839, 0.0055731614120304585, 0.014961052685976028, 0.0099602276459336281, 0.006797383539378643, 0.0049065356142818928, 0.0061462605372071266, 0.0052190814167261124, 0.0050470870919525623, 0.003177303122356534, 0.0022734962403774261, 0.015443460084497929, 0.0037096969317644835, 0.0042784069664776325, 0.01613907516002655, 0.010793581604957581, 0.0086295558139681816, 0.012810732237994671, 0.013221322558820248, 0.0090829720720648766, 0.011232705786824226, 0.014400565065443516, 0.010407226160168648, 0.005562792532145977, 0.005025758408010006, 0.0071383123286068439, 0.010357389226555824, 0.0075088385492563248, 0.0050346497446298599, 0.03862299770116806, 0.0082816239446401596, 0.0058801244013011456, 0.019416868686676025, 0.0053899283520877361, 0.0074717155657708645, 0.0094937542453408241, 0.0066958158276975155, 0.010720940306782722, 0.0037382685113698244, 0.0068914876319468021, 0.0081491796299815178, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 295, 4553, -5236, 3597, 2054, 3459, 2166, 7770, 9360, 6118, -1738, -311, 768, 3575, 2691, -1109, 280, 4438, 9897, 551, 1671, 6889, 1960, 7146, 6065, 4768, 1498, 8541, 1977, 6024, -1460, 7815, 1611, 4827, 4409, 4594, 51671, 8105, 3439, 8468, 1676, 426, 4102, 811, 4043, 1838, 1495, 2994, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00041590732871554792, 0.00015504908515140414, 0.00014885490236338228, 0.00018364543211646378, 0.00021023878070991486, 0.00017445084813516587, 0.00023660944134462625, 0.00011464127601357177, 9.7879783425014466e-05, 0.000120158088975586, 0.00021662190556526184, 0.00024661922361701727, 0.00023676395358052105, 0.00018351222388446331, 0.00019082038488704711, 0.00014877995999995619, 0.00017577732796780765, 0.00015589391114190221, 0.00010173996270168573, 0.00022129100398160517, 0.00026934323250316083, 0.00012577236338984221, 0.00028569443384185433, 0.00010933695011772215, 0.00014324515359476209, 0.00017620220023673028, 0.00019951544527430087, 0.00010843490599654615, 0.00012081669410690665, 0.00013701777788810432, 0.00035519513767212629, 9.9620665423572063e-05, 0.00026901505771093071, 0.00016780260193627328, 0.00015583200729452074, 0.00018245066166855395, 2.9871660444769077e-05, 0.00012092830729670823, 0.00018022200674749911, 0.00011111743515357375, 0.00020129064796492457, 0.00028696338995359838, 0.0001669677731115371, 0.0002581289445515722, 0.00017042362014763057, 0.00016588426660746336, 0.00028759220731444657, 0.00012352308840490878, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -100,-127,-38,34,-41,-21,42,-61, 
  /* [1][0][][] */ -7,127,36,-56,4,-79,-68,70, 
  /* [2][0][][] */ -127,-59,39,9,69,7,28,-17, 
  /* [3][0][][] */ 8,-34,-127,-36,31,-53,-23,47, 
  /* [4][0][][] */ -55,-106,127,-20,119,-37,66,1, 
  /* [5][0][][] */ -26,64,52,-85,83,25,-49,127, 
  /* [6][0][][] */ -113,88,64,74,-40,6,41,-127, 
  /* [7][0][][] */ 47,-36,59,31,53,-127,9,99, 
  /* [8][0][][] */ -7,67,-5,-31,24,102,127,-82, 
  /* [9][0][][] */ 69,127,22,-79,-96,-53,-61,115, 
  /* [10][0][][] */ 40,-3,29,12,-31,27,-127,-68, 
  /* [11][0][][] */ -53,23,-109,-58,127,11,35,33, 
  /* [12][0][][] */ 95,32,-34,-12,127,101,22,13, 
  /* [13][0][][] */ -110,-127,-14,44,-83,52,77,8, 
  /* [14][0][][] */ -2,97,-93,127,-49,102,-8,30, 
  /* [15][0][][] */ -34,-82,-47,-113,127,56,-46,82, 
  /* [16][0][][] */ 74,-97,6,39,45,-8,44,-127, 
  /* [17][0][][] */ -103,-105,-127,89,19,91,59,-104, 
  /* [18][0][][] */ 78,-17,127,0,-21,-122,-100,-48, 
  /* [19][0][][] */ -34,127,35,16,71,-91,-74,-23, 
  /* [20][0][][] */ -75,-1,-127,-47,29,-5,-12,-7, 
  /* [21][0][][] */ -104,-40,52,79,-64,-97,127,-63, 
  /* [22][0][][] */ 60,1,-127,-68,-20,-4,-9,30, 
  /* [23][0][][] */ -25,15,127,-34,-89,48,12,-79, 
  /* [24][0][][] */ -86,80,75,101,127,79,13,-52, 
  /* [25][0][][] */ -64,-127,-53,50,-73,45,67,-6, 
  /* [26][0][][] */ 90,93,-93,-79,-127,-8,-63,58, 
  /* [27][0][][] */ 77,63,-89,28,-127,8,-46,-22, 
  /* [28][0][][] */ -26,72,50,-92,83,122,-121,-127, 
  /* [29][0][][] */ 35,-23,12,-103,-127,28,13,-65, 
  /* [30][0][][] */ -80,-7,32,127,47,12,-30,-23, 
  /* [31][0][][] */ 12,-118,-2,-92,-127,50,-63,-112, 
  /* [32][0][][] */ -127,-7,35,-18,6,-20,8,20, 
  /* [33][0][][] */ 42,-63,-127,-122,-21,18,-50,42, 
  /* [34][0][][] */ 40,105,116,-5,-127,-83,69,-83, 
  /* [35][0][][] */ 91,31,21,10,-93,-44,-127,-53, 
  /* [36][0][][] */ 127,-1,104,-53,10,-10,68,92, 
  /* [37][0][][] */ 127,117,-22,7,75,63,-118,31, 
  /* [38][0][][] */ -21,99,106,127,-16,71,31,-87, 
  /* [39][0][][] */ 53,51,127,-54,113,-47,-51,14, 
  /* [40][0][][] */ 73,49,43,15,-86,-127,38,-59, 
  /* [41][0][][] */ 22,-46,15,127,-24,56,11,69, 
  /* [42][0][][] */ -24,-127,67,-65,127,-48,117,47, 
  /* [43][0][][] */ -8,-37,-80,-42,85,54,-62,127, 
  /* [44][0][][] */ 86,-26,127,-14,2,35,-43,15, 
  /* [45][0][][] */ -51,38,40,-48,-98,-127,-32,91, 
  /* [46][0][][] */ -75,88,99,23,-2,-11,35,-127, 
  /* [47][0][][] */ 44,-20,1,127,-4,-127,70,72, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0069781262427568436, 0.0026014258619397879, 0.002497499343007803, 0.0030812176410108805, 0.0035274028778076172, 0.0029269501101225615, 0.0039698518812656403, 0.001923460396938026, 0.0016422347398474813, 0.0020160218700766563, 0.0036344993859529495, 0.0041377968154847622, 0.0039724442176520824, 0.003078982699662447, 0.0032015994656831026, 0.0024962418247014284, 0.0029492059256881475, 0.0026156003586947918, 0.0017070011235773563, 0.0037128380499780178, 0.0045190621167421341, 0.0021102186292409897, 0.0047934036701917648, 0.0018344640266150236, 0.0024033784866333008, 0.0029563345015048981, 0.0033474860247224569, 0.001819329452700913, 0.002027072012424469, 0.0022988950368016958, 0.0059594921767711639, 0.0016714433440938592, 0.0045135556720197201, 0.0028154053725302219, 0.0026145617011934519, 0.0030611716210842133, 0.00050118908984586596, 0.0020289446692913771, 0.0030237790197134018, 0.0018643371295183897, 0.0033772704191505909, 0.0048146946355700493, 0.0028013985138386488, 0.0043309079483151436, 0.0028593810275197029, 0.0027832193300127983, 0.0048252446576952934, 0.0020724800415337086, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 3884, -2701, 14838, -9642, -12711, -10846, -6732, -1445, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00010241963900625706, 0.00013966056576464325, 9.4570415967609733e-05, 0.00012107596558053046, 0.00014409192954190075, 0.00011095598893007264, 0.00018268698477186263, 0.00024876481620594859, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -21,-24,42,-47,56,84,69,93,106,-49,-19,57,-26,-17,18,-21,45,38,9,-51,-33,20,-85,-39,33,-10,19,-76,-38,34,50,25,23,46,64,19,112,-48,-80,6,-56,-66,-35,-4,-64,-89,-127,55, 
  /* [1][0][][] */ -9,-2,-37,53,4,15,-42,-18,-52,30,17,80,-26,6,-30,127,44,61,7,-30,-44,-24,-64,21,7,-10,-14,-84,55,-13,-56,-64,64,-36,-35,-53,39,34,47,-41,-1,58,44,-42,4,-36,-44,-19, 
  /* [2][0][][] */ 7,-65,-24,-8,-41,13,12,14,120,7,-13,-14,-29,-71,34,6,-6,-73,-24,-6,-102,50,0,33,11,47,-36,-20,-32,-31,45,-50,-107,24,-47,49,-73,67,-13,-30,127,-27,-11,41,26,40,-55,-27, 
  /* [3][0][][] */ -30,-111,102,67,30,-108,-26,-13,-127,126,67,-58,59,5,-16,25,66,32,-26,58,83,83,39,-61,12,95,76,34,-38,-69,11,14,-27,5,51,16,-15,-91,-44,54,-30,-9,24,-63,-83,28,5,35, 
  /* [4][0][][] */ -11,63,-16,79,36,11,12,-5,-52,76,44,71,1,23,61,19,12,-107,-4,-11,91,-22,-92,59,73,-30,30,32,45,37,-7,-48,-46,127,7,13,66,-32,23,31,-35,35,-8,-27,1,-54,-34,29, 
  /* [5][0][][] */ -31,-7,-5,-77,-127,34,122,22,6,63,-34,-28,-105,-11,47,-27,-89,42,-54,-83,-1,91,-5,30,103,18,-19,13,-12,-28,117,-49,-6,99,75,88,-14,52,88,32,-27,-44,-30,30,-67,42,28,57, 
  /* [6][0][][] */ 3,-24,-9,24,-59,-57,19,2,19,-16,38,10,-54,-27,30,55,0,-66,6,-60,72,-28,-2,-33,12,-4,11,41,44,-2,8,127,40,-14,-12,22,2,-7,20,10,-2,36,-31,-52,-8,-28,-26,41, 
  /* [7][0][][] */ -28,-16,-42,-5,3,-22,8,13,37,3,22,-1,-10,13,2,4,28,-6,4,-1,-59,8,10,-28,-2,-9,-55,-13,-17,-14,23,34,21,-12,25,9,-22,127,-11,-43,-37,1,-47,-37,19,61,-74,-11, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0043528345413506031, 0.0059355739504098892, 0.0040192427113652229, 0.005145728588104248, 0.0061239069327712059, 0.0047156293876469135, 0.0077641969546675682, 0.010572504252195358, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -187, 28458, 28584, -118, -525, -13465, 21342, 15686, -13947, 5875, -940, 15039, 20960, -14433, -10700, 1174, 1105, 31617, -731, 157, 46844, 7709, -8900, -5088, 16311, 12602, -1514, -2164, -2455, -56, 26576, 431, 555, 6403, 12407, 11695, 1271, 44757, -4898, -1414, 28050, 353, -4720, 15823, 590, -300, -8582, 16485, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00026011012960225344, 8.9310618932358921e-05, 0.00010385313362348825, 9.8950768006034195e-05, 6.389412737917155e-05, 0.00012736456119455397, 0.00010725060565164313, 9.4212940894067287e-05, 0.00031232432229444385, 4.9927777581615373e-05, 0.00017971020133700222, 8.5841747932136059e-05, 9.4590017397422343e-05, 0.00019271951168775558, 0.00010614928032737225, 5.8198289480060339e-05, 7.1982991357799619e-05, 0.00018735254707280546, 0.00053980114171281457, 6.0301692428765818e-05, 5.4791955335531384e-05, 7.6802731200587004e-05, 6.5583764808252454e-05, 0.00015040958533063531, 7.4491319537628442e-05, 9.240928920917213e-05, 0.00028934318106621504, 0.00017281281179748476, 0.00014205674233380705, 0.00031609006691724062, 0.00015985836216714233, 7.4930656410288066e-05, 4.1145016439259052e-05, 8.4124105342198163e-05, 8.5031344497110695e-05, 8.395840268349275e-05, 5.850896195624955e-05, 8.2713682786561549e-05, 9.262526873499155e-05, 0.00010486529936315492, 0.00010509153798921034, 0.00030372897163033485, 8.9175780885852873e-05, 6.4228028350044042e-05, 0.00039978019776754081, 0.00021109178487677127, 0.00025817350251600146, 0.00011228576477151364, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 55,-83,-34,43,98,44,-68,-73,23,66,103,-60,-32,63,99,51,80,-77,64,68,-82,-44,44,54,-29,-20,97,88,78,64,-50,74,50,-62,-98,-67,98,-74,87,14,-82,24,29,-117,65,122,80,-96, 94,-103,-71,80,117,49,-73,-85,39,81,94,-104,-50,80,111,81,75,-104,45,81,-80,-68,71,71,-60,-51,119,106,89,127,-65,115,69,-82,-127,-80,120,-84,70,39,-109,50,29,-116,119,127,90,-127, 54,-47,-39,42,47,5,-44,-39,37,19,16,-38,-56,38,43,36,27,-29,23,25,-2,-37,40,27,-26,-16,56,48,38,48,-12,28,38,-48,-91,-21,48,-34,12,17,-40,14,29,-55,31,28,38,-98, 
  /* [0][1][][] */ 32,-92,-62,80,116,90,-113,-87,92,97,113,-73,-87,90,127,86,123,-103,43,116,-107,-126,79,122,-106,-71,124,102,90,71,-94,90,87,-99,-84,-118,93,-102,123,67,-96,63,100,-126,70,98,40,-63, 40,-127,-127,127,127,127,-127,-127,127,127,127,-127,-103,127,106,127,127,-127,58,127,-127,-127,127,127,-127,-127,127,127,127,84,-127,127,127,-127,-96,-127,127,-127,127,121,-127,127,127,-127,127,102,53,-119, -15,-64,-97,66,49,34,-89,-41,68,41,17,-56,-88,47,48,63,38,-39,29,43,-32,-109,62,73,-93,-16,41,56,56,21,-28,27,74,-90,-72,-41,37,-48,36,54,-30,38,53,-57,48,-10,35,-66, 
  /* [0][2][][] */ -43,-49,-50,48,28,40,-68,-25,-72,47,25,-63,-91,35,60,60,53,-46,-74,79,-52,-49,53,26,-105,-62,79,54,8,1,-44,24,62,-82,-32,-44,32,-47,53,102,-49,40,79,-95,53,14,-104,-49, -127,-79,-93,74,46,63,-73,-36,-52,61,50,-70,-127,48,33,85,64,-49,-127,96,-61,-74,75,30,-117,-56,55,59,12,4,-62,39,88,-106,-19,-46,46,-59,60,127,-39,73,117,-79,71,-26,-127,-90, -55,-23,-73,41,5,19,-1,5,-65,27,24,-19,-59,21,26,55,9,-27,-60,60,-26,0,22,18,-68,0,18,31,-2,-6,-17,15,47,-47,-23,1,-4,-26,13,42,-17,29,53,-5,26,-27,-44,-24, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.011054680682718754, 0.0037957010790705681, 0.0044137579388916492, 0.0042054075747728348, 0.0027155003044754267, 0.0054129934869706631, 0.0045581506565213203, 0.0040040500462055206, 0.013273783028125763, 0.0021219304762780666, 0.0076376833021640778, 0.0036482743453234434, 0.0040200757794082165, 0.008190578781068325, 0.0045113442465662956, 0.002473427215591073, 0.0030592770781368017, 0.0079624829813838005, 0.022941548377275467, 0.0025628218427300453, 0.0023286580108106136, 0.0032641158904880285, 0.0027873099315911531, 0.0063924072310328484, 0.0031658811494708061, 0.0039273947477340698, 0.012297084555029869, 0.0073445443995296955, 0.006037411279976368, 0.013433828018605709, 0.0067939800210297108, 0.0031845527701079845, 0.0017486631404608488, 0.0035752742551267147, 0.0036138319410383701, 0.0035682320594787598, 0.0024866308085620403, 0.0035153315402567387, 0.00393657386302948, 0.0044567752629518509, 0.0044663902372121811, 0.012908481061458588, 0.003789970651268959, 0.0027296910993754864, 0.016990657895803452, 0.0089714005589485168, 0.010972373187541962, 0.0047721448354423046, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -1539, 5255, 4213, -1164, 23, 9633, 2203, 1508, 6611, 1266, -2751, 1753, 4694, 1190, -151, 913, -1597, 7329, -2962, -538, 1080, 818, 345, -790, 238, 3161, -2071, -1234, -807, -2866, 10511, 3293, 703, 885, 471, 800, 1378, 6348, 955, 643, 5582, -2071, 701, 1554, -1989, -2226, 10092, 2258, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00030673094443045557, 0.00016163309919647872, 0.00019482013885863125, 0.00026761661865748465, 0.00053720828145742416, 9.6062962256837636e-05, 0.00035414376179687679, 0.00026891965535469353, 0.00014855984773021191, 0.00040824667667038739, 0.00019611834431998432, 0.00029625743627548218, 0.00015678827185183764, 0.00036558415740728378, 0.0004567831929307431, 0.00020825199317187071, 0.00025419078883714974, 0.00013970326108392328, 0.0001524449180578813, 0.00050096982158720493, 0.00037662286194972694, 0.00029404921224340796, 0.00032854822347871959, 0.00021661222854163498, 0.00038947458961047232, 0.00018233511946164072, 0.0002466952137183398, 0.00024315113842021674, 0.00031438141013495624, 0.00016756514378357679, 0.00010408520029159263, 0.0002213030238635838, 0.00033472734503448009, 0.00033434026408940554, 0.00031217734795063734, 0.0003725687856785953, 0.00022201047977432609, 0.00013703062722925097, 0.00041826989036053419, 0.00026449430151842535, 0.00017070157628040761, 0.00012603339564520866, 0.00031177260098047554, 0.00026575359515845776, 0.0002943689760286361, 0.00022605000413022935, 0.00010472583380760625, 0.00019971492292825133, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 25,5,-55,10,-36,37,-127,36, 
  /* [1][0][][] */ 6,-61,-115,3,-10,-23,127,-116, 
  /* [2][0][][] */ -127,-43,-63,-47,-34,51,-112,-1, 
  /* [3][0][][] */ -52,-42,24,-10,-25,-127,-127,-21, 
  /* [4][0][][] */ -40,-127,-39,25,54,18,-45,-41, 
  /* [5][0][][] */ 67,-44,90,54,-127,49,-63,-98, 
  /* [6][0][][] */ 44,-127,-81,-39,-3,68,-54,-90, 
  /* [7][0][][] */ -25,-91,-73,-76,78,-127,6,23, 
  /* [8][0][][] */ 37,60,56,71,35,-56,-5,127, 
  /* [9][0][][] */ -22,-58,-45,10,40,-18,127,-15, 
  /* [10][0][][] */ -34,20,-127,22,21,20,104,-108, 
  /* [11][0][][] */ 3,-32,-33,3,-127,23,5,55, 
  /* [12][0][][] */ 106,70,-16,51,-92,127,112,-32, 
  /* [13][0][][] */ -41,-11,20,-15,35,-127,-7,65, 
  /* [14][0][][] */ -96,-40,3,30,17,78,-118,-127, 
  /* [15][0][][] */ 56,83,58,4,-127,39,115,-60, 
  /* [16][0][][] */ -3,-57,10,89,-3,-71,-1,-127, 
  /* [17][0][][] */ -72,127,36,-11,-62,-48,-84,-74, 
  /* [18][0][][] */ 89,127,-108,-96,108,91,-97,-83, 
  /* [19][0][][] */ -32,74,-17,20,-127,0,-77,-105, 
  /* [20][0][][] */ -127,-1,12,10,25,21,102,53, 
  /* [21][0][][] */ -44,-10,46,19,-98,-103,-127,30, 
  /* [22][0][][] */ -2,-34,-53,-2,-127,8,7,54, 
  /* [23][0][][] */ 60,7,-15,-24,127,62,-94,91, 
  /* [24][0][][] */ 127,11,-48,29,-79,5,4,-4, 
  /* [25][0][][] */ 27,-62,54,127,-60,-122,39,115, 
  /* [26][0][][] */ 15,127,7,55,88,-16,16,-17, 
  /* [27][0][][] */ -118,115,58,-11,127,-65,3,84, 
  /* [28][0][][] */ -73,-76,-58,-37,81,-127,20,-17, 
  /* [29][0][][] */ -66,-40,70,55,127,-117,-85,69, 
  /* [30][0][][] */ 127,41,-123,-96,-79,-94,-80,-69, 
  /* [31][0][][] */ 23,7,38,68,-127,16,35,7, 
  /* [32][0][][] */ 127,13,47,48,-41,-60,97,57, 
  /* [33][0][][] */ 127,31,-52,10,-115,-49,28,44, 
  /* [34][0][][] */ 35,-2,-15,21,-38,127,25,-79, 
  /* [35][0][][] */ 124,37,-32,-38,42,-81,26,127, 
  /* [36][0][][] */ -38,-49,76,-89,-33,-24,73,-127, 
  /* [37][0][][] */ 74,-67,55,44,118,-13,28,-127, 
  /* [38][0][][] */ 77,127,17,-28,-34,20,31,81, 
  /* [39][0][][] */ 29,6,-86,63,-29,-58,-77,127, 
  /* [40][0][][] */ -8,-38,2,-26,23,-127,24,37, 
  /* [41][0][][] */ -30,62,-127,-65,108,119,66,-127, 
  /* [42][0][][] */ 24,-51,-56,22,89,127,23,67, 
  /* [43][0][][] */ 10,42,-23,35,-127,-87,51,-72, 
  /* [44][0][][] */ -127,-46,-13,-23,35,58,-110,-56, 
  /* [45][0][][] */ -59,63,-60,23,39,-6,-69,127, 
  /* [46][0][][] */ -28,61,127,-1,-37,-70,-28,24, 
  /* [47][0][][] */ -117,-127,-67,-53,114,108,-38,95, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0029373783618211746, 0.0015478633577004075, 0.0018656756728887558, 0.002562803914770484, 0.0051445215940475464, 0.00091993738897144794, 0.0033914225641638041, 0.0025752824731171131, 0.0014226686907932162, 0.0039095338433980942, 0.0018781078979372978, 0.0028370798099786043, 0.0015014673117548227, 0.0035009803250432014, 0.0043743387795984745, 0.0019943045917898417, 0.0024342327378690243, 0.0013378544244915247, 0.0014598736306652427, 0.0047974875196814537, 0.0036066914908587933, 0.0028159331995993853, 0.0031463094055652618, 0.0020743655040860176, 0.0037297646049410105, 0.0017461142269894481, 0.0023624522145837545, 0.0023285127244889736, 0.0030106422491371632, 0.0016046708915382624, 0.00099676160607486963, 0.0021192864514887333, 0.0032054833136498928, 0.0032017764169722795, 0.0029895354527980089, 0.0035678679123520851, 0.0021260613575577736, 0.0013122601667419076, 0.0040055201388895512, 0.0025329033378511667, 0.0016347066266462207, 0.0012069463264197111, 0.0029856592882424593, 0.0025449628010392189, 0.0028189951553940773, 0.0021647454705089331, 0.0010028965771198273, 0.0019125501858070493, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10321, 14371, 5451, 5407, 1155, -10688, 3771, -7615, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00012254701869096607, 0.00012228007835801691, 0.00017111291526816785, 0.00020567256433423609, 0.0001283478777622804, 0.00014139532868284732, 7.2258073487319052e-05, 0.00011148346675327048, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 45,-47,112,76,34,-45,21,7,-10,57,-35,17,-51,-93,46,10,-119,63,-30,71,-42,67,5,-32,3,-40,76,-23,-23,35,-26,116,-59,-7,-43,-91,-69,-50,-34,-10,-7,61,-127,14,58,32,29,57, 
  /* [1][0][][] */ -55,-27,51,-3,-29,32,-34,-29,52,-4,-6,-31,-20,15,-1,17,3,25,13,-13,-58,-22,-72,-14,16,-36,-37,-32,18,-65,-4,-127,-5,-54,-68,-63,-44,-83,-20,26,36,-12,77,-103,-52,-19,-21,-10, 
  /* [2][0][][] */ -58,94,-13,32,7,9,19,-39,80,-47,69,78,93,17,30,-61,99,3,4,26,-14,17,15,127,-113,-34,1,-19,-5,72,-25,-83,-25,4,5,-73,-21,3,-32,-9,84,-73,13,0,25,-117,2,-20, 
  /* [3][0][][] */ 62,-23,-66,27,82,-84,8,-126,-27,-7,-55,-88,-19,127,-12,14,-37,-16,-70,-59,29,80,-13,-47,104,42,45,-68,35,-97,54,-60,53,51,109,-69,-43,11,-26,40,20,86,-78,31,-4,26,6,35, 
  /* [4][0][][] */ -50,34,-36,68,92,-33,29,-41,-39,-1,-68,34,-40,-20,3,-54,4,59,-33,-32,-39,37,-59,-66,18,-6,19,-37,29,-28,-27,60,-2,68,-65,-76,-62,-62,-40,1,66,-57,127,21,-2,85,-59,-42, 
  /* [5][0][][] */ 50,6,83,-14,-11,22,47,32,127,-8,69,-7,70,54,24,-57,-19,27,31,-51,-58,-79,14,38,20,-17,24,41,-46,-32,18,-28,-32,50,-26,59,46,-2,-32,-54,-12,68,34,37,-20,-12,64,5, 
  /* [6][0][][] */ -2,-60,-18,22,46,-10,-6,17,-44,-6,99,52,96,70,-25,53,117,-127,-17,-1,-10,-34,-102,45,-82,78,-28,6,-20,-42,75,-48,100,22,-76,-27,-50,10,71,18,77,-68,4,-74,-103,41,-41,24, 
  /* [7][0][][] */ -9,-25,-67,-37,14,108,-8,-5,-7,-57,-127,-110,41,59,-59,-55,-33,29,117,26,-12,-85,63,-7,111,-26,-87,100,-50,-10,-32,-83,-57,83,48,127,89,-62,-15,-37,-33,2,33,-16,-4,-26,9,-63, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0052082482725381851, 0.0051969033665955067, 0.0072722984477877617, 0.0087410835549235344, 0.0054547847248613834, 0.0060093016363680363, 0.0030709679704159498, 0.0047380472533404827, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1176, 4553, 2790, 107, 589, 9163, 583, -2915, -4573, -1015, -5892, -433, -4203, -6735, -2185, 187, -7222, 15216, -4015, -730, -1578, -343, -2535, -1153, 21348, 8, -992, -1261, 130, 899, -1739, -7462, 265, 11710, -74, 6609, -621, -3509, -2324, -639, -2163, -2166, 2889, 6942, 358, 6355, -107, -2323, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00038675000541843474, 0.00010155966447200626, 0.00061963527696207166, 0.00018467390327714384, 0.00013768364442512393, 0.00028467588708736002, 0.00024396704975515604, 0.00021740871306974441, 0.00041508907452225685, 0.00013127921556588262, 0.00048550468636676669, 0.00021349913731683046, 0.00012367476301733404, 0.00016415418940596282, 0.00018676808394957334, 0.00048611144302412868, 0.00029868737328797579, 9.0960689703933895e-05, 0.00011680400348268449, 0.00062140868976712227, 0.00024792025214992464, 0.00033909943886101246, 0.0002089591434923932, 0.00084240682190284133, 0.00023805398086551577, 0.00031297304667532444, 0.00024668156402185559, 0.00014667287177871913, 0.0002537523687351495, 0.00019041182531509548, 0.00045622873585671186, 0.00050943304086104035, 0.0004777353024110198, 0.00013123801909387112, 0.00056675286032259464, 0.00019190178136341274, 0.00018001209537032992, 7.7129268902353942e-05, 0.00049772410420700908, 0.00072745635407045484, 0.00028966739773750305, 0.00078234483953565359, 0.00064691290026530623, 0.00014476683281827718, 0.00024580297758802772, 0.00013023897190578282, 0.00030570346280001104, 0.00035843040677718818, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -6,-55,36,-31,127,-5,-11,-18,-33,42,-14,16,67,25,127,-42,16,-9,-21,-12,-25,-18,-50,32,-127,38,34,-55,-14,4,-11,2,-29,39,14,5,85,61,37,0,53,21,-14,-15,-102,-6,-41,-34, 2,-114,-77,-30,-63,-1,35,15,19,-8,67,127,-8,65,-55,127,20,-64,34,-45,-61,-127,-63,86,-125,-80,23,110,13,18,127,7,-127,-101,-51,41,127,-75,127,18,57,-5,-22,-24,-53,-7,70,3, 12,-31,-18,127,41,9,-85,-8,-26,-45,-25,-14,49,3,-45,-49,25,19,10,-6,4,2,-19,21,-59,-58,-26,29,4,15,-88,-11,10,73,17,20,7,75,-120,8,19,2,-10,12,-127,9,-56,46, 
  /* [0][1][][] */ -109,-82,127,-11,-39,-39,78,14,14,104,3,18,54,26,106,29,30,-127,101,39,75,-7,54,-36,-15,-29,39,-54,24,50,43,64,38,-80,3,127,11,40,-35,-110,12,100,-18,-88,28,-79,-59,25, 127,-78,-79,-71,2,-127,127,127,127,13,127,-39,-127,19,-28,-43,127,-101,127,127,127,84,127,-127,2,-24,107,-12,127,127,-114,127,29,-122,127,-93,-63,127,-93,117,-127,-127,127,-127,102,-127,127,-112, -6,-127,10,76,-29,-11,-58,11,-19,-127,-39,48,86,3,-42,45,9,3,0,20,6,-23,47,-20,-6,8,-127,90,-62,10,83,14,-14,-105,-15,-37,61,13,125,14,15,62,-41,-1,58,-21,-59,127, 
  /* [0][2][][] */ -6,118,24,-40,89,14,-53,-17,-28,23,-11,2,51,17,88,6,-26,-19,-5,-43,-14,12,9,12,-25,-13,27,2,-57,-102,-1,-8,-6,36,-18,34,-51,40,20,97,3,21,0,6,23,5,-15,-36, 3,92,-54,13,34,-34,-10,25,32,17,22,-34,35,127,-66,-81,-13,-46,98,-71,-42,79,8,55,79,127,-1,127,-76,-98,-10,-8,86,-127,-83,2,-62,-35,-22,-127,38,-21,-52,77,54,25,20,12, 15,125,-20,32,28,8,-73,-4,-23,-13,-12,-6,53,-15,-57,-4,-26,-1,-24,-18,-6,5,4,1,-54,29,-46,14,29,-72,21,-6,6,49,2,-17,-39,69,16,-1,-31,-5,5,-17,15,8,-2,33, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.016436874866485596, 0.0043162857182323933, 0.026334498077630997, 0.0078486409038305283, 0.0058515546843409538, 0.012098724953830242, 0.010368599556386471, 0.009239870123565197, 0.017641285434365273, 0.0055793663486838341, 0.020633948966860771, 0.0090737128630280495, 0.0052561773918569088, 0.0069765527732670307, 0.0079376436769962311, 0.020659735426306725, 0.012694213539361954, 0.0038658292032778263, 0.0049641700461506844, 0.026409870013594627, 0.010536610148847103, 0.014411726035177708, 0.0088807633146643639, 0.035802289843559265, 0.010117294266819954, 0.01330135390162468, 0.010483966208994389, 0.006233596708625555, 0.01078447513282299, 0.0080925021320581436, 0.019389720633625984, 0.021650904789566994, 0.020303750410676003, 0.0055776159279048443, 0.024086995050311089, 0.0081558255478739738, 0.0076505136676132679, 0.0032779937610030174, 0.021153274923563004, 0.030916893854737282, 0.01231086440384388, 0.033249653875827789, 0.027493797242641449, 0.0061525902710855007, 0.01044662669301033, 0.00553515600040555, 0.012992396950721741, 0.015233292244374752, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 6013, 2329, 34037, -2326, -1176, 5471, -448, 843, 2061, 60, 6657, 532, 2409, 3378, 2488, 3606, 2068, 2670, -599, 5136, 1463, 376, 1041, 10383, 28771, 3870, 3746, -1024, -122, 5793, 5727, 9655, 9881, 3886, 5847, -1186, 405, 1834, 8245, 4985, 976, 14503, 13121, 3478, 6725, 1651, 3372, 657, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00014861799718346447, 0.00025016514700837433, 3.9310223655775189e-05, 0.0002294245787197724, 0.00033169068046845496, 0.00019204120326321572, 0.00026758646708913147, 0.00058949243975803256, 0.00029745962820015848, 0.00027318572392687201, 0.00013182190014049411, 0.00032715671113692224, 0.00023782903735991567, 0.00024391605984419584, 0.00021429704793263227, 0.00020458963990677148, 0.00021408872271422297, 0.00020575888629537076, 0.00041452792356722057, 0.00017739603936206549, 0.00024800776736810803, 0.00033981466549448669, 0.0002931512426584959, 9.8881100711878389e-05, 5.4914322390686721e-05, 0.00021650595590472221, 0.00021154100249987096, 0.0003179649356752634, 0.00052889256039634347, 0.00015489858924411237, 0.00015274749603122473, 0.00010241834388580173, 9.4993323727976531e-05, 0.00021876502432860434, 0.00014601415023207664, 0.00020064288401044905, 0.00033779101795516908, 0.00021907634800300002, 0.00010988843132508919, 0.0001753711694618687, 0.00019954131857957691, 7.1206297434400767e-05, 8.6559040937572718e-05, 0.00021537148859351873, 0.00014132959768176079, 0.00035884426324628294, 0.00023345260706264526, 0.00026999539113603532, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -28,30,18,-127,-85,2,22,112, 
  /* [1][0][][] */ 104,6,-8,-3,-73,46,127,9, 
  /* [2][0][][] */ -3,97,-46,-32,-29,74,-41,-127, 
  /* [3][0][][] */ 61,-78,-82,122,-127,-48,-16,-30, 
  /* [4][0][][] */ 30,-61,48,-12,-127,-5,46,33, 
  /* [5][0][][] */ -16,56,-11,-103,-127,2,-41,13, 
  /* [6][0][][] */ 43,-9,27,40,127,-19,2,-122, 
  /* [7][0][][] */ 11,29,21,127,23,-11,-1,22, 
  /* [8][0][][] */ 23,28,16,-43,22,127,17,-21, 
  /* [9][0][][] */ 87,21,-12,-2,-67,-58,127,68, 
  /* [10][0][][] */ 7,70,-69,-36,-1,127,89,-66, 
  /* [11][0][][] */ -24,-49,-127,106,-62,26,-24,94, 
  /* [12][0][][] */ -102,-78,52,47,39,-127,-35,7, 
  /* [13][0][][] */ 38,36,34,50,-53,127,13,-39, 
  /* [14][0][][] */ 20,-99,0,11,-71,-68,-127,104, 
  /* [15][0][][] */ -94,45,-4,23,120,7,-127,-51, 
  /* [16][0][][] */ 97,83,-90,-112,38,127,103,42, 
  /* [17][0][][] */ -111,125,-125,54,-19,-34,33,-127, 
  /* [18][0][][] */ 38,-7,-92,127,-11,-37,-33,-49, 
  /* [19][0][][] */ 107,24,3,23,-41,14,127,36, 
  /* [20][0][][] */ 59,-79,-89,127,53,-28,-39,-79, 
  /* [21][0][][] */ 26,45,127,-97,34,-32,19,-95, 
  /* [22][0][][] */ -65,-33,-127,53,-24,40,9,99, 
  /* [23][0][][] */ 74,30,32,34,-127,96,43,-32, 
  /* [24][0][][] */ -9,-5,-127,92,-47,24,38,79, 
  /* [25][0][][] */ 50,-31,-66,127,47,-2,-39,-12, 
  /* [26][0][][] */ -87,32,127,-112,-16,27,61,-12, 
  /* [27][0][][] */ -65,82,127,4,27,-10,84,14, 
  /* [28][0][][] */ -46,-96,44,-127,-21,6,-9,-25, 
  /* [29][0][][] */ -89,-64,-15,82,-5,-127,-24,62, 
  /* [30][0][][] */ -127,43,107,-38,43,28,60,22, 
  /* [31][0][][] */ -61,51,81,-127,-48,15,32,62, 
  /* [32][0][][] */ -101,112,94,-127,22,20,15,118, 
  /* [33][0][][] */ 4,98,-44,48,28,17,-127,-24, 
  /* [34][0][][] */ 93,15,116,-127,-69,-93,30,-58, 
  /* [35][0][][] */ 87,-1,33,113,75,-73,34,-127, 
  /* [36][0][][] */ 23,62,127,-86,25,-24,34,-98, 
  /* [37][0][][] */ -53,-44,105,60,2,-127,80,-18, 
  /* [38][0][][] */ 85,4,75,43,-30,-60,127,10, 
  /* [39][0][][] */ 57,-80,-14,5,-127,16,57,71, 
  /* [40][0][][] */ -46,25,-117,121,-46,46,-103,127, 
  /* [41][0][][] */ -102,-10,-49,12,127,22,-95,21, 
  /* [42][0][][] */ -95,65,-31,-39,127,35,-123,-52, 
  /* [43][0][][] */ 121,99,-36,127,7,-107,63,84, 
  /* [44][0][][] */ 4,28,84,14,29,-127,19,-34, 
  /* [45][0][][] */ -6,-80,127,80,-32,-22,-111,17, 
  /* [46][0][][] */ 37,-121,-127,49,-92,19,12,-21, 
  /* [47][0][][] */ -108,-24,50,-3,86,36,-127,-39, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0023544828873127699, 0.0039632450789213181, 0.00062277284450829029, 0.0036346623674035072, 0.0052548148669302464, 0.0030424157157540321, 0.0042392425239086151, 0.0093390429392457008, 0.0047125089913606644, 0.0043279491364955902, 0.0020883905235677958, 0.0051829852163791656, 0.003767810296267271, 0.0038642438594251871, 0.0033950041979551315, 0.0032412144355475903, 0.0033917038235813379, 0.0032597384415566921, 0.0065671652555465698, 0.0028103995136916637, 0.0039290669374167919, 0.0053835189901292324, 0.0046442532911896706, 0.0015665253158658743, 0.00086998101323843002, 0.0034299988765269518, 0.003351341700181365, 0.005037364549934864, 0.0083789881318807602, 0.0024539832957088947, 0.0024199045728892088, 0.0016225641593337059, 0.0015049332287162542, 0.0034657882060855627, 0.0023132313508540392, 0.0031786879990249872, 0.0053514596074819565, 0.0034707204904407263, 0.001740909181535244, 0.0027783205732703209, 0.0031612364109605551, 0.0011280868202447891, 0.0013713130028918386, 0.0034120262134820223, 0.0022390163503587246, 0.005684996023774147, 0.0036984765902161598, 0.0042774062603712082, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -13421, 2592, -15210, 2719, 3168, -3540, 8888, 1410, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00017639249563217163, 0.00013043003855273128, 0.00010872722486965358, 6.3288993260357529e-05, 0.00018102896865457296, 0.00012159392645116895, 0.00014246015052776784, 0.00012606167001649737, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 55,113,-40,75,-6,-4,-22,12,68,-63,2,-25,16,12,-38,-60,-3,-19,36,15,-56,-30,-36,9,19,20,28,0,16,13,-20,30,-64,14,116,-127,-23,26,-9,115,-28,20,18,4,-18,40,28,-43, 
  /* [1][0][][] */ -2,-47,39,53,-14,-15,-17,-24,44,-48,97,50,23,11,-45,-89,127,36,18,4,-73,38,42,-12,-45,-96,-37,-55,-14,-62,43,-41,-15,-31,-32,12,3,-20,88,-52,-19,33,-66,35,87,66,10,55, 
  /* [2][0][][] */ 77,-31,-21,-19,100,111,62,72,-29,-8,4,-29,-9,45,61,34,-20,-33,61,-70,-46,-47,-41,58,-100,-95,122,17,59,-61,-62,21,-127,88,114,16,-10,-7,-12,17,25,64,6,-65,-23,14,48,-44, 
  /* [3][0][][] */ 75,-38,11,-16,127,120,27,50,-39,-30,29,46,-124,42,72,22,1,4,73,-119,-86,18,35,89,4,-38,48,29,47,-66,-1,-12,-123,55,-63,-125,16,-39,58,-54,49,-92,-109,-34,-68,38,-13,56, 
  /* [4][0][][] */ 32,39,-27,-37,-9,-11,-20,-17,4,-6,-8,-13,-30,-21,61,51,-40,-19,-27,44,27,-8,-9,3,-47,-39,-5,54,-14,15,-21,28,-33,-20,24,-127,-11,23,7,51,4,-13,-15,-24,42,3,78,-17, 
  /* [5][0][][] */ 65,55,-89,51,10,1,-4,30,-87,-56,-55,-26,38,26,48,30,43,-63,43,127,-66,-50,-59,47,33,-29,-41,68,28,28,-60,3,-7,1,-62,-2,-10,19,-23,72,20,76,-4,-45,121,31,17,-60, 
  /* [6][0][][] */ -27,-76,23,-46,-44,-38,-76,-80,-31,-63,-115,44,-51,-49,96,91,-127,9,25,-24,19,62,72,10,-10,-8,-73,88,-84,-45,46,78,18,-58,95,44,29,42,-6,-91,-9,-58,-25,19,-47,-18,-8,67, 
  /* [7][0][][] */ 72,19,-11,41,13,13,10,4,83,-8,-16,-23,60,3,-17,-21,-56,-7,-28,5,-2,-21,-23,-30,75,-127,12,6,1,98,-17,21,-81,18,-65,-41,-15,30,33,24,31,72,-30,-12,-47,31,47,-25, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0074966810643672943, 0.0055432766675949097, 0.0046209068968892097, 0.0026897820644080639, 0.0076937312260270119, 0.0051677417941391468, 0.0060545564629137516, 0.0053576207719743252, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 2207, 7120, 2258, -1637, 114, 359, 7659, 8294, 1079, -5374, 497, 194, 6063, 4144, 23101, 18033, -1475, -2232, 4576, 6258, 14445, -359, 203, 427, 5723, 1790, 6122, 19446, 6965, 10554, -246, 2824, -858, -2739, -3361, 1724, 320, 890, 860, 3394, 3465, 3377, -6754, 986, 3944, -249, 8609, -239, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.2139765911269933e-05, 0.00013928371481597424, 0.00064376345835626125, 9.8375581728760153e-05, 0.00052821106510236859, 0.0007687215693295002, 0.00011149915371788666, 0.00020459909865166992, 6.0330556152621284e-05, 0.00027409495669417083, 0.00048701991909183562, 0.00027762950048781931, 0.00021626128000207245, 0.00014922651462256908, 6.3171559304464608e-05, 6.0532685893122107e-05, 0.00014040672976989299, 0.00051356060430407524, 5.6836463045328856e-05, 7.8642093285452574e-05, 5.9016241721110418e-05, 0.00077886064536869526, 0.0011359179625287652, 0.00026649492792785168, 4.8739369958639145e-05, 0.00012682340457104146, 8.9863082394003868e-05, 0.0001376951695419848, 0.00018304343393538147, 0.00012697788770310581, 0.00045628781663253903, 0.00019521612557582557, 9.4176109996624291e-05, 0.00023639002756681293, 7.3206836532335728e-05, 6.9296271249186248e-05, 0.00033889638143591583, 0.00022649392485618591, 9.2589601990766823e-05, 0.00017326227680314332, 9.1646550572477281e-05, 0.00021893938537687063, 0.00011283712956355885, 0.00039935688255354762, 8.8210596004500985e-05, 0.00020902638789266348, 7.202664710348472e-05, 0.00082647212548181415, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -31,-84,-100,68,-86,2,-90,-74,58,83,127,-42,2,10,-90,-77,88,-85,29,-62,-14,-107,-39,-77,93,104,-3,-102,3,-37,58,70,61,79,73,30,86,108,27,9,-116,-9,52,37,-52,63,-33,-99, 99,0,34,71,-127,41,-64,12,105,96,108,64,-12,-73,-127,-127,107,-36,93,-106,-107,127,127,24,127,107,42,-106,-70,-43,-105,108,112,127,108,95,-23,105,71,-67,-81,-82,29,-51,-73,73,-51,103, 115,-2,59,46,-76,13,-25,-11,31,86,1,-30,-78,8,-58,-70,22,85,61,-26,-57,-25,-82,59,51,39,20,-39,-6,-42,31,37,51,101,22,56,-9,23,58,-8,-52,-13,15,20,-29,48,-20,-4, 
  /* [0][1][][] */ 29,-127,102,88,89,-73,-127,-127,102,90,103,-48,8,-6,-96,-68,99,127,37,-109,-33,113,25,-127,92,125,106,-113,0,-87,-77,93,114,-12,101,65,36,127,54,-3,-8,-19,105,88,-111,98,-106,115, 127,-1,-3,127,121,-127,-95,6,127,127,122,59,-27,-127,-102,-115,127,62,127,-127,-127,-121,-111,42,95,127,127,-127,-127,-89,127,127,127,-5,127,127,-3,121,127,-127,12,-127,127,-84,-127,127,-127,-127, 113,-3,-127,63,89,-57,-37,-16,25,79,8,-17,-127,0,-35,-21,36,-98,79,-10,-59,11,68,59,50,55,-11,-61,-16,-68,-37,34,40,-9,24,65,1,-1,73,-4,-22,-12,46,-10,-67,52,-55,16, 
  /* [0][2][][] */ 47,-80,4,20,-1,64,-84,-76,39,13,43,55,14,-1,-63,-32,28,-35,21,-81,-20,1,14,-74,40,34,80,-20,6,-120,15,17,67,-88,75,23,-127,34,0,-4,28,-8,92,-127,-88,33,-72,-13, 37,12,3,54,9,90,-29,-3,32,53,39,-127,-8,-81,-50,-44,47,-6,54,-122,-44,-11,-24,25,51,42,86,-66,-77,-127,-24,29,67,-95,66,33,20,40,46,-50,127,-61,124,98,-123,60,-113,17, -36,-4,-7,34,-16,40,-16,-12,10,21,-40,41,-73,-1,-21,-4,11,32,33,-21,-40,24,16,26,31,27,31,-14,-12,-62,16,4,4,-47,11,26,11,-18,25,11,62,1,23,-13,-36,44,-23,-3, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0039159399457275867, 0.0059195575304329395, 0.027359945699572563, 0.0041809622198343277, 0.022448970004916191, 0.03267066553235054, 0.0047387140803039074, 0.0086954617872834206, 0.0025640486273914576, 0.011649034917354584, 0.020698346197605133, 0.011799253523349762, 0.0091911042109131813, 0.0063421269878745079, 0.0026847911067306995, 0.0025726391468197107, 0.0059672859497368336, 0.021826324984431267, 0.0024155497085303068, 0.0033422890119254589, 0.0025081902276724577, 0.033101577311754227, 0.048276513814926147, 0.011326034553349018, 0.0020714232232421637, 0.0053899944759905338, 0.0038191808853298426, 0.0058520445600152016, 0.0077793458476662636, 0.005396560300141573, 0.019392231479287148, 0.0082966852933168411, 0.004002484492957592, 0.010046576149761677, 0.0031112905126065016, 0.0029450913425534964, 0.014403095468878746, 0.0096259918063879013, 0.0039350581355392933, 0.0073636467568576336, 0.0038949784357100725, 0.0093049239367246628, 0.0047955778427422047, 0.01697266660630703, 0.0037489503156393766, 0.0088836215436458588, 0.0030611325055360794, 0.035125065594911575, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 11452, 4884, 10764, 2961, 3614, 4437, -4068, 4496, 2077, -2486, -3977, 5177, -2887, -4811, 7927, 1602, -2030, 2959, -1615, 3226, 697, 4115, -21, -2717, -406, -4632, 2401, -3537, 4075, 7644, 1138, 565, 7653, 10585, 8121, 4865, 5436, -4473, 872, 4741, -986, -4237, 4283, 2351, 226, -6047, -11162, 2916, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00041001909994520247, 0.00063142471481114626, 0.00010117734200321138, 0.00084015837637707591, 0.00054511037888005376, 0.00037039050948806107, 0.0022359376307576895, 0.0012374314246699214, 0.0011275074211880565, 0.00055873021483421326, 0.00014687854854855686, 0.00053395621944218874, 0.00045675903675146401, 0.0011037839576601982, 0.0005916774389334023, 0.0018093186663463712, 0.0011436351342126727, 0.00028780847787857056, 0.0011273809941485524, 0.0018475948600098491, 0.00081536982906982303, 0.00048608577344566584, 0.0001472385338274762, 0.00048173163668252528, 0.0012978644808754325, 0.00086905929492786527, 0.00095865048933774233, 0.00046638076310046017, 0.0011399412760511041, 0.0007587560685351491, 0.00034160548239015043, 0.00055160542251542211, 0.00079060863936319947, 0.00030452469945885241, 0.00048846506979316473, 0.0003556671435944736, 0.00054577557602897286, 0.0020062217954546213, 0.00059717055410146713, 0.00067454867530614138, 0.001274536014534533, 0.00062771938974037766, 0.00085264875087887049, 0.00026138251996599138, 0.001352889696136117, 0.00077416864223778248, 0.00065802724566310644, 0.00046805647434666753, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -116,-111,26,-127,-67,1,-4,1, 
  /* [1][0][][] */ -127,-13,93,-8,-49,21,7,14, 
  /* [2][0][][] */ 23,-14,19,127,23,-22,-17,-4, 
  /* [3][0][][] */ -113,-73,-26,-26,41,127,-52,-37, 
  /* [4][0][][] */ -8,-26,-11,-6,-10,11,-127,-70, 
  /* [5][0][][] */ 0,-33,-18,-1,-11,12,-127,-71, 
  /* [6][0][][] */ 127,10,18,-11,-65,15,1,-7, 
  /* [7][0][][] */ -127,-32,-18,0,70,11,-2,10, 
  /* [8][0][][] */ 22,52,-9,-8,-27,-127,49,13, 
  /* [9][0][][] */ 74,20,-13,-9,-25,-4,-10,127, 
  /* [10][0][][] */ 118,-4,-127,12,-80,-1,43,120, 
  /* [11][0][][] */ -127,107,15,-44,95,-78,10,20, 
  /* [12][0][][] */ 127,-35,-112,5,53,-5,-5,-23, 
  /* [13][0][][] */ 127,12,18,-12,-30,28,7,-17, 
  /* [14][0][][] */ -124,-92,89,-27,83,-6,-52,-127, 
  /* [15][0][][] */ 36,73,0,-8,-7,-127,-23,10, 
  /* [16][0][][] */ -10,-60,10,3,11,127,11,6, 
  /* [17][0][][] */ 30,-121,-80,-13,-35,127,-58,-14, 
  /* [18][0][][] */ 38,-24,-17,-15,-21,28,127,-11, 
  /* [19][0][][] */ -3,20,-1,-127,-7,32,-4,-12, 
  /* [20][0][][] */ -86,-24,82,2,52,95,-2,-127, 
  /* [21][0][][] */ -17,-7,34,-28,-16,8,-127,-84, 
  /* [22][0][][] */ 71,-11,4,127,-20,-7,59,40, 
  /* [23][0][][] */ 127,-17,-108,-5,31,-25,14,0, 
  /* [24][0][][] */ -35,28,29,34,5,3,-127,-79, 
  /* [25][0][][] */ 127,10,-86,6,14,-8,6,26, 
  /* [26][0][][] */ 2,55,-36,-127,-25,25,3,0, 
  /* [27][0][][] */ 127,9,-102,-5,-100,46,15,84, 
  /* [28][0][][] */ -127,-23,-18,11,56,6,-6,31, 
  /* [29][0][][] */ -9,-122,-12,-127,-7,25,-14,-24, 
  /* [30][0][][] */ -16,83,127,26,26,-98,90,47, 
  /* [31][0][][] */ -81,-4,-127,47,-2,-28,102,109, 
  /* [32][0][][] */ -5,-126,0,-127,-14,14,-10,-18, 
  /* [33][0][][] */ 7,-119,-7,-127,0,9,0,-20, 
  /* [34][0][][] */ -30,-49,30,-98,37,-59,127,81, 
  /* [35][0][][] */ -127,6,56,0,-121,-26,30,94, 
  /* [36][0][][] */ -127,11,109,-9,-48,22,-32,37, 
  /* [37][0][][] */ 127,16,-6,-8,-77,20,2,16, 
  /* [38][0][][] */ -74,11,84,37,71,-58,45,127, 
  /* [39][0][][] */ -127,-3,77,-9,-67,10,-5,1, 
  /* [40][0][][] */ -2,36,44,-19,28,-6,127,51, 
  /* [41][0][][] */ 127,-10,-68,-3,54,9,9,-10, 
  /* [42][0][][] */ -19,-127,33,-8,12,5,-6,-20, 
  /* [43][0][][] */ -8,118,127,-13,41,-104,59,20, 
  /* [44][0][][] */ 11,-16,-5,115,5,-127,-3,0, 
  /* [45][0][][] */ 127,-28,37,-14,-56,102,13,-2, 
  /* [46][0][][] */ 8,127,-7,98,2,118,21,32, 
  /* [47][0][][] */ -18,31,11,-33,26,-42,127,73, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0051224576309323311, 0.0078885257244110107, 0.0012640304630622268, 0.010496281087398529, 0.0068101822398602962, 0.0046273688785731792, 0.027934053912758827, 0.015459499321877956, 0.014086194336414337, 0.0069803381338715553, 0.0018349855672568083, 0.0066708307713270187, 0.0057063899002969265, 0.013789812102913857, 0.0073919543065130711, 0.022604210302233696, 0.014287681318819523, 0.0035956536885350943, 0.014084614813327789, 0.023082403466105461, 0.010186592116951942, 0.0060727749951183796, 0.0018394829239696264, 0.0060183778405189514, 0.016214502975344658, 0.010857346467673779, 0.011976628564298153, 0.0058265961706638336, 0.014241533353924751, 0.0094793038442730904, 0.0042677512392401695, 0.0068913260474801064, 0.0098772449418902397, 0.0038044929970055819, 0.0061025000177323818, 0.0044434266164898872, 0.0068184924311935902, 0.025064162909984589, 0.0074605811387300491, 0.0084272827953100204, 0.01592305488884449, 0.0078422343358397484, 0.010652326047420502, 0.0032655084505677223, 0.01690194383263588, 0.0096718566492199898, 0.0082208774983882904, 0.0058475309051573277, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 3783, -4518, -77, 3283, 2242, 240, -2247, 2176, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 6.4705876866355538e-05, 0.0001339970767730847, 9.4192917458713055e-05, 6.0849943110952154e-05, 0.00012608016550075263, 0.00018476088007446378, 0.00010496757022337988, 0.00019040092593058944, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -20,-1,-43,-28,-16,38,-127,-9, 
  /* [1][0][][] */ 21,95,-4,127,8,-8,-11,-40, 
  /* [2][0][][] */ 127,-9,-34,-59,-71,50,101,-57, 
  /* [3][0][][] */ 10,-127,42,-83,16,-91,27,62, 
  /* [4][0][][] */ 116,1,-64,-15,23,-6,-127,-40, 
  /* [5][0][][] */ 2,-32,5,41,2,-127,-2,8, 
  /* [6][0][][] */ 127,-32,116,-5,118,-30,-2,2, 
  /* [7][0][][] */ -127,-2,-93,-6,-93,7,34,6, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0027499997522681952, 0.0056948759593069553, 0.0040031988173723221, 0.00258612260222435, 0.0053584068082273006, 0.0078523373231291771, 0.0044611217454075813, 0.0080920392647385597, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -10510, 12320, 237, -11068, -368, -13243, 104, 109, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00033160511520691216, 0.00042024641879834235, 0.00023791032435838133, 0.00040681552491150796, 0.00050887861289083958, 0.00035959624801762402, 0.0018030279316008091, 0.0023403449449688196, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ 2,-2,15,16,9,-1,9,32, 5,-1,-37,127,-24,0,-4,32, -5,-3,-7,14,0,1,-6,22, 
  /* [0][1][][] */ -4,-1,127,-25,127,-1,-111,45, 127,-127,-99,4,-95,127,-14,-127, -28,3,17,-25,0,1,127,43, 
  /* [0][2][][] */ 3,0,9,3,7,-1,16,36, 4,2,-41,-2,-14,4,-9,-104, -5,-1,-8,-2,2,-2,-5,41, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.014093216508626938, 0.017860472202301025, 0.010111188516020775, 0.017289659008383751, 0.021627340465784073, 0.015282840467989445, 0.076628684997558594, 0.099464654922485352, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 4661, 5113, -401, 16400, 1738, 4491, 56134, 1160, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00053211260819807649, 0.00042215979192405939, 0.00025239339447580278, 0.00016642569971736521, 0.00038700221921317279, 0.00053847540402784944, 1.9565197362680919e-05, 9.1682719357777387e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -56, 50, 9, 
  /* [0][1][][] */ -127, 121, 0, 
  /* [0][2][][] */ -42, 46, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -44, 
  /* [1][2][][] */ 7, -41, 6, 
  /* [2][0][][] */ 32, 28, -46, 
  /* [2][1][][] */ 53, 70, -127, 
  /* [2][2][][] */ 21, 33, -58, 
  /* [3][0][][] */ 41, 52, 19, 
  /* [3][1][][] */ 52, 73, 25, 
  /* [3][2][][] */ -81, -127, -58, 
  /* [4][0][][] */ 4, -53, 47, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -17, -82, 0, 
  /* [6][1][][] */ -26, -127, -6, 
  /* [6][2][][] */ -13, -55, 3, 
  /* [7][0][][] */ 48, -127, 35, 
  /* [7][1][][] */ -17, -1, -8, 
  /* [7][2][][] */ -22, 79, -8, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.1537545770406723, 0.12198358029127121, 0.072929374873638153, 0.048088908195495605, 0.11182475835084915, 0.15559312701225281, 0.005653387401252985, 0.026491831988096237, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.066922567784786224, } };
const TfArray<1, int> quant46_zero = { 1, { 28 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.080043435096740723, } };
const TfArray<1, int> quant47_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.063121289014816284, } };
const TfArray<1, int> quant51_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10139609128236771, } };
const TfArray<1, int> quant54_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10442336648702621, } };
const TfArray<1, int> quant55_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.059601578861474991, } };
const TfArray<1, int> quant59_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.021251829341053963, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.022659406065940857, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.03493066132068634, } };
const TfArray<1, int> quant62_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.069167084991931915, } };
const TfArray<1, int> quant63_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.022679250687360764, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.050893004983663559, } };
const TfArray<1, int> quant66_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.09285271167755127, } };
const TfArray<1, int> quant67_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.037628956139087677, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.062919057905673981, } };
const TfArray<1, int> quant70_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
